package AnalizadorPnt;
import java_cup.runtime.Symbol;
/*
import static AnalizadorPnt.parserPnt.Semanticos;
import static AnalizadorPnt.parserPnt.cadenaValue;
import static AnalizadorPnt.parserPnt.getObj;
import static AnalizadorPnt.parserPnt.tablaForInt;

import static AnalizadorPnt.parserPnt.tipoVar;
import TablaDeSimbolos.tablaInt;

import drawgif.Errors;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
*/
parser code {:
    public static ArrayList<tablaInt> tablaForInt;
    public static ArrayList<Errors> Semanticos;

        
public static int tipoVar,tipoOperacion;
public static String cadenaValue,condicion,cadenaPrev;

   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

 public static Object[] getObj(Object [] obj1,Object [] obj2,int opc, int cases,int e2left,int e2right){
/*Object obj1[]=(Object[])e;
Object obj2[]=(Object[])e2;*/
int type=(int)obj1[0]+(int)obj2[0];
String x1=(String)obj1[2];
String x2=(String)obj2[2];
     if(cases==1){

if(type==2){
int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1+v2;
    obj1[2]=x1+"+"+x2;
 
    return obj1;
    case 2:
    obj1[1]=v1-v2;
    obj1[2]=x1+"-"+x2;
  
    return obj1;
 
}
}else{
obj1[0]=-55;    
    
if(opc==1){
  
    obj1[2]=x1+"+"+x2;
}else{
 
  obj1[2]=x1+"-"+x2;
}
return obj1;
}     
     }else{

if(type==2){

int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1*v2;
    obj1[2]=x1+"*"+x2;
  
    return obj1;
    case 2:
    if(v2==0){
        v2=-1;
        Semanticos.add(new Errors(String.valueOf(v2),"No se puede dividir entre cero",-1,e2left,e2right));
    }
    obj1[1]=v1/v2;
    obj1[2]=x1+"/"+x2;
   
    return obj1;
}
}else{
obj1[0]=-55;    
if(opc==1){
 
    obj1[2]=x1+"+"+x2;
}else{

  obj1[2]=x1+"-"+x2;
}
return obj1;
}
     }
 return null;
 }

 
:}

terminal Vars,abreCor,cierraCor,Int,Id,String,Boolean,puntoComa,coma,equals,
Sum,Res,Mul,Div,Num,abreParen,cierraParen,Double,Cadena,Operador,Bool,COM,Error,abreLlaves,cierraLlaves
,Punto,Inst,If,Else,While,pintar,dobleEquals,And,Or;

non-terminal A,VARIABLES,VALUES,OPCBOOL,OPCSTR,OPCINT,K,E,T,OP2,OP1,F,STR,STR1,CADENA,CONDICION,COND,COND1,
INSTRUC,INSTRUCCIONES,ASIGNACION,ASIG,SENTENCIAIF,SENTENCIAWHILE,PAINT,PARAM,PARAM2,SYMBOLS,STR2,C,U,X,V
,STR3,COND2,CONDICION2,COND22,COND23,CONDICIONAL,Datas,ASIGNACION2,ASIG2,CONDICIONAL2,COND24,COND233
,E22,V22,X22,T22,U22,C22,DATA22,S1,S2,S3,S11,S22, OPCIONINT1,OPCIONINT2,INT,STRING,BOOLEAN,OPCIONBOOL,
OPCIONBOOL2,OPCIONSTRING,OPCIONSTRING2,STRINGX,OperadorLogico;

precedence left And,Or;

start with A;


SYMBOLS::= Sum | Res | Mul | Div | abreParen | cierraParen;
//A::= VARIABLES K  INSTRUCCIONES;
OperadorLogico::= And | Or;
A::= VARIABLES K ;

VARIABLES::= Vars abreCor VALUES ;


VALUES::= INT OPCIONINT1
| BOOLEAN OPCIONBOOL
| STRINGX OPCIONSTRING;

INT::=Int Id:e OPCINT:e1 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);
boolean isNull=false;
if((double)e1==-1.5){
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"int"));
:};
BOOLEAN::= Boolean Id:e OPCBOOL:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=Boolean.parseBoolean(String.valueOf(e1));
boolean isNull=false;
if(e1!=null){
isNull=true;
if(((String)e1).equals("error")){

isNull=true;
}
}else{
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"bool"));
:};
OPCBOOL::= equals E22:e {:RESULT=e;:} | {:RESULT="error";:}; 
OPCIONBOOL::= OPCIONBOOL2 OPCIONBOOL | puntoComa {:RESULT="error";:};
OPCIONBOOL2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(false,(String)e,true,"bool"));
:}
| coma Id:e equals E22:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=Boolean.parseBoolean(String.valueOf(e1));
tablaForInt.add(new tablaInt(value,(String)e,false,"bool"));
:}
;

STRINGX::= String Id:e OPCSTR:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
String value=String.valueOf(e1);
boolean isNull=false;
if(((String)e1).equals("null")){
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"str"));
:};

OPCSTR::= equals S1:e {:RESULT=e;:} | {:RESULT="null";:}; 

OPCIONSTRING::= OPCIONSTRING2 OPCIONSTRING | puntoComa {:RESULT="null";:};
OPCIONSTRING2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt("",(String)e,true,"str"));
:}
| coma Id:e equals S1:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
String value=String.valueOf(e1);
tablaForInt.add(new tablaInt(value,(String)e,false,"str"));
:}
;




OPCINT::= equals E:e {:RESULT=e;:} | {:RESULT=-1.5;:};

OPCIONINT1::= OPCIONINT2 OPCIONINT1 | puntoComa {:RESULT=-1.5;:};
OPCIONINT2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(-1,(String)e,true,"int"));
:}
| coma Id:e equals E:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);

tablaForInt.add(new tablaInt(value,(String)e,false,"int"));
:}

;
K::= cierraCor | VALUES K;

/*
*Condicion int
*/



E::=T:e OP1:e1 E:e2
{:
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1+x2);
}else{
RESULT=(x1-x2);
}
}catch(Exception ex){}
:}
| T:e {:RESULT=e;:};
T::= F:e OP2:e1 T:e2
{:
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1*x2);
}else{
RESULT=(x1/x2);
}
}catch(Exception ex){}
:}
| F:e {:RESULT=e;:};

F::= Num:e
{:RESULT=Double.parseDouble((String)e);:}
| abreParen E:e cierraParen {:RESULT=e;:}
| Id:e
{:
String msj="El identificador no existe";
boolean valid=true;
int valor=1;
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    try{
    valor=tablaForInt.get(i).getValorInt();
    RESULT=Double.parseDouble(String.valueOf(valor));
    valid=false;
    if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
    valid=true;
    }   
    }catch(Exception exs){
    msj="La variable no es de tipo entero";
    valid=true;
    }
    
     break;
   
}}
if(valid){
    RESULT=-1.5;
    parserPnt.Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
:}
| Double:e 
{:RESULT=Double.parseDouble((String)e);:};

OP2::= Mul 
{:RESULT=1;
:} 
| Div 
{:RESULT=2;

:};
OP1::=Sum 
{:RESULT=1;

:} 
| Res 
{:

RESULT=2;:};



/*
*Condicion string
*/


CADENA::= STRING:e CADENA:e1
{:
RESULT=e+""+e1;
:}
| {:RESULT="";:};
STRING::= Cadena:e {:RESULT=e;:} | Id:e {:RESULT=e;:} | Num:e {:RESULT=e;:} | SYMBOLS:e {:RESULT=e;:};
/*
*SECCION DE INSTRUCCIONES
*/

INSTRUCCIONES::= Inst abreParen Id cierraParen abreCor INSTRUC   ;
INSTRUC::= ASIGNACION ASIG | PAINT ASIG| SENTENCIAIF ASIG| SENTENCIAWHILE ASIG ;
ASIGNACION::= Id equals E22 puntoComa  ;
ASIG::= cierraCor|INSTRUC;



E22::= C:e S11:e1
{:


:}
| CONDICION:e X22:e1
{:
Object re[]=new Object[3];
if(e1!=null){
Object obx[]=(Object[])e1;
Object obj2[]=(Object[])obx[1];
Object obj1[]=(Object[])e;
            
String Operador=(String)obx[0];
int type1=    (int) obj1[0];
int type2=    (int) obj2[0];
if(type1==1){
    if(type2==1){
        
    }else{
       parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, datos no del mismo tipo",-1,eleft,eright));
      }
}else if((type1==-55)|| (type1==2)){
    if((type2==-55)|| (type2==2)){
        if(Operador.equals("==")){

        }else{
        parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, Un string no puede ser comparador con"+Operador,-1,eleft,eright));
        }
    }else{
             parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, datos no del mismo tipo",-1,eleft,eright));
    }

} 
String t1=String.valueOf(obj1[2]);
String t2=String.valueOf(obj2[2]);
if(t1.contains("AND")||t1.contains("OR")){
         parserPnt.Semanticos.add(new Errors((String)obj1[2],"Error, de sintaxis",-1,eleft,eright));
}
if(t2.contains("AND")||t1.contains("OR")){
         parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, de sintaxis",-1,e1left,e1right));
}


}



:};

//CONDICIONES--------------------------->

CONDICION::= V22:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:} 
|V22:e {: RESULT=e;:} 
;
V22::= DATA22:e OP2:e1 S2:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);
:}
|DATA22:e {:RESULT=e;:} 
|abreParen COND1:e X22:e1 cierraParen 
{:
//Objeto con 3 Objetos
if(e1!=null){
Object obx[]=(Object[])e1;
Object obj2[]=(Object[])obx[1];
String Operador=(String)obx[0];
int type1=    (int) obj1[0];
int type2=    (int) obj2[0];
if(type1==1){
    if(type2==1){
        
    }else{
       parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, datos no del mismo tipo",-1,eleft,eright));
      }
}else if((type1==-55)|| (type1==2)){
    if((type2==-55)|| (type2==2)){
        if(Operador.equals("==")){

        }else{
        parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, Un string no puede ser comparador con"+Operador,-1,eleft,eright));
        }
    }else{
        parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, datos no del mismo tipo",-1,eleft,eright));
    }

}
String t1=String.valueOf(obj1[2]);
String t2=String.valueOf(obj2[2]);
if(t1.contains("AND")||t1.contains("OR")){
         parserPnt.Semanticos.add(new Errors((String)obj1[2],"Error, de sintaxis",-1,eleft,eright));
}
if(t2.contains("AND")||t1.contains("OR")){
         parserPnt.Semanticos.add(new Errors((String)obj2[2],"Error, de sintaxis",-1,e1left,e1right));
}
}
:}
;
//------------------------------------------------------------------------->
X22::= Operador:e S1:e1 S11:e2
{:
Object [] obj=new Object[4];
obj[0]=e;
obj[1]=e1;

RESULT=obj;
:}
| S11:e 
{:RESULT=e;:}
;

//------------------------------------------------------------------------->
COND1::= V22:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:}
|V22:e {:RESULT=e;:}
;
//----------------------------->
COND::= Operador:e S1:e1 |  ;


C::=  abreParen C:e S11:e1 cierraParen 
{:


:}
| Bool:e 
{:RESULT=e;:};


S11::= OperadorLogico:e E22:e1 
{:


:} 
|;




//Retornando el tipo de variable
DATA22::=
Num:e {:
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;
:}
|Id:e 
{:
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            break;
        }
        array[2]=tablaForInt.get(i).getValue();
        
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}
if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;
:} 
| COM CADENA:e COM 
{:
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]=(String)e;
array[3]=false;

           
RESULT=array;
:};



S1::=S2:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:}
| S2:e {:RESULT=e;:};
S2::= S3:e OP2:e1 S2:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);
:}
| S3:e {:RESULT=e;:};
S3::= Num:e
{:
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;
:}
| abreParen S1:e cierraParen
{:
Object obj[]=(Object[])e;
String aux=obj[2];
obj[2]="("+aux+")";

RESULT=obj;
;:}
| Id:e
{:
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            Semanticos.add(new Errors((String)e,"No se puede asignar una variable booleana",-1,eleft,eright));
            break;
        }
        array[2]=tablaForInt.get(i).getValue();
            
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}

if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;
:}
| COM CADENA:e COM
{:
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]=(String)e;
array[3]=false;

           
RESULT=array;
:}
;



SENTENCIAIF::= If abreParen E22 cierraParen V Else V;
SENTENCIAWHILE::= While abreParen E22 cierraParen V ;
PAINT::= pintar abreParen E22 coma E22 coma PARAM2 coma PARAM2 cierraParen puntoComa;

PARAM2::= E
| E Punto E;

V::=abreLlaves Datas ;
V::=abreLlaves cierraLlaves;

Datas::= ASIGNACION2 | PAINT ASIG2| SENTENCIAIF ASIG2| SENTENCIAWHILE ASIG2 ;
ASIGNACION2::= Id equals E22  ASIG2  ;
ASIG2::= cierraLlaves|Datas;