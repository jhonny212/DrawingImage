/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import AnalizadorColors.Colores;
import AnalizadorColors.ContentColor;
import AnalizadorLienzos.lienzo;
import AnalizadorPnt.Codigo;
import java.lang.reflect.Method;
import AnalizadorTime.Tiempos;
import AnalizadorTime.Time;
import drawgif.Errors;

import drawgif.panelError;
import drawgif.panelTxt;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.TextArea;
import java.awt.TextField;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author jhonny
 */
public class EditorDeTexto extends javax.swing.JFrame {

    /**
     * Creates new form EditorDeTexto
     */
    panelTxt lienzo, colores, tiempo, codigo;
    lienzo lz;
    Colores clr;
    Time tmp;
    Codigo pnt;

    public EditorDeTexto() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        Panel.setSize(new Dimension(this.getWidth(), this.getHeight() - 20));
        this.Menu3.disable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jMenuItem4 = new javax.swing.JMenuItem();
        Panel = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        Menu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        Menu3 = new javax.swing.JMenu();
        Gif = new javax.swing.JMenuItem();
        Png = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        jMenuItem1.setText("jMenuItem1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Menu1.setText("Archivo");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Nuevo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Menu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Abrir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Menu1.add(jMenuItem3);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Guardar");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        Menu1.add(jMenuItem14);

        jMenuItem15.setText("Salir");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        Menu1.add(jMenuItem15);

        jMenuBar1.add(Menu1);

        Menu2.setText("Analisis");

        jMenuItem5.setText("Analizar tiempo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        Menu2.add(jMenuItem5);

        jMenuItem6.setText("Analizar colores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        Menu2.add(jMenuItem6);

        jMenuItem7.setText("Analizar codigo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        Menu2.add(jMenuItem7);

        jMenuItem8.setText("Analizar lienzo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        Menu2.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Analizar todos");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        Menu2.add(jMenuItem9);

        jMenuBar1.add(Menu2);

        Menu3.setText("Generar");

        Gif.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        Gif.setText("Exportar Gif");
        Gif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GifActionPerformed(evt);
            }
        });
        Menu3.add(Gif);

        Png.setText("Exportar a Png");
        Png.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PngActionPerformed(evt);
            }
        });
        Menu3.add(Png);

        jMenuItem10.setText("Volver al menu de editor");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        Menu3.add(jMenuItem10);

        jMenuBar1.add(Menu3);

        jMenu5.setText("Ayuda");

        jMenuItem11.setText("Manual De usuario");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenuItem12.setText("Manual Tecnico");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem12);

        jMenuItem13.setText("Acerca De");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem13);

        jMenuItem16.setText("F");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem16);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 991, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JComboBox jcmbOpciones = null;
        String[] Lista = {"clrs", "lnz", "tmp", "pnt"};
        jcmbOpciones = new JComboBox(Lista);
        TextField txt = new TextField("Escriba el nombre");
        JOptionPane.showMessageDialog(null, txt);
        String nombre = txt.getText();
        JOptionPane.showMessageDialog(null, jcmbOpciones, "Extension del archivo", 1);
        String d = (String) jcmbOpciones.getSelectedItem();
        String(d, false, nombre, null);

    }//GEN-LAST:event_jMenuItem2ActionPerformed
    private void String(String d, boolean valid, String nombre, File fc) {
        switch (d) {
            case "clrs":
                try {
                    colores.setArchivo(null);
                    Panel.remove(colores);
                } catch (Exception e) {
                }

                colores = new panelTxt();
                Panel.addTab(nombre + "." + d, colores);
                Panel.setSelectedComponent(colores);
                if (valid) {
                    colores.setArchivo(fc);
                    colores.initText();
                }

                break;
            case "lnz":
                try {
                    lienzo.setArchivo(null);
                    Panel.remove(lienzo);
                } catch (Exception e) {
                }
                lienzo = new panelTxt();
                Panel.addTab(nombre + "." + d, lienzo);
                Panel.setSelectedComponent(lienzo);
                if (valid) {
                    lienzo.setArchivo(fc);
                    lienzo.initText();
                }

                break;
            case "tmp":
                try {
                    Panel.remove(tiempo);
                } catch (Exception e) {
                }
                tiempo = new panelTxt();
                Panel.addTab(nombre + "." + d, tiempo);
                Panel.setSelectedComponent(tiempo);
                if (valid) {
                    tiempo.setArchivo(fc);
                    tiempo.initText();
                }

                break;
            case "pnt":
                try {
                    codigo.setArchivo(null);
                    Panel.remove(codigo);
                } catch (Exception e) {
                }
                codigo = new panelTxt();
                Panel.addTab(nombre + "." + d, codigo);
                Panel.setSelectedComponent(codigo);
                if (valid) {
                    codigo.setArchivo(fc);
                    codigo.initText();
                }

                break;

        }
    }
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.clrs", "clrs", "*.tmp", "tmp", "*.lnz", "lnz", "*.pnt", "pnt");
        fc.setFileFilter(filtro);
        fc.setAcceptAllFileFilterUsed(false);
        int seleccion = fc.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            String name = fc.getSelectedFile().getName();
            String ext = "";
            if (name.contains(".tmp")) {
                ext = "tmp";
            } else if (name.contains(".pnt")) {
                ext = "pnt";
            } else if (name.contains(".clrs")) {
                ext = "clrs";
            } else if (name.contains(".lnz")) {
                ext = "lnz";
            }
            String(ext, true, name, fc.getSelectedFile());
            //Seleccionamos el fichero
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (iniciarErrores(1)) {
            JOptionPane.showMessageDialog(this, "Analisis sin errores");
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (iniciarErrores(4)) {
            JOptionPane.showMessageDialog(this, "Analisis sin errores");
        }


    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if (iniciarErrores(2)) {
            JOptionPane.showMessageDialog(this, "Analisis sin errores");
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (iniciarErrores(3)) {
            JOptionPane.showMessageDialog(this, "Analisis sin errores");
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        all(0);
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    private void all(int opc) {

        boolean x1 = false, x2 = false, x3 = false, x4 = false;

        try {
            x1 = iniciarErrores(4);
            x2 = iniciarErrores(2);
            x3 = iniciarErrores(1);
            if (opc == 0) {
                x4 = iniciarErrores(3);
            } else {
                x4 = true;
            }
        } catch (NullPointerException e) {

        }

        if (x1 && x2 && x3 && x4) {
            int seleccion = JOptionPane.showConfirmDialog(this, "¿Desea ir a la parte Grafica?", "", 0);
            if (seleccion == 0) {
                lz.getLienzos().stream().map((lienzo1) -> {
                    Tiempos Time = null;
                    ContentColor color = null;
                    for (Tiempos listTime : tmp.getListTime()) {
                        if (lienzo1.getId().equals(listTime.getName())) {
                            Time = listTime;

                        }
                    }
                    for (ContentColor listado : clr.getListado()) {
                        if (lienzo1.getId().equals(listado.getName())) {
                            color = listado;
                        }
                    }
                    EditorGrafico t = new EditorGrafico();
                    Panel.addTab(lienzo1.getId(), t);
                    Panel.setSelectedComponent(t);
                    t.setClr(color);
                    t.setTmp(Time);
                    t.setLz(lienzo1);
                    return t;
                }).forEachOrdered((t) -> {
                    t.setItems();
                });
                panelTxt name = (panelTxt) Panel.getComponentAt(0);
                name.save();
                name = (panelTxt) Panel.getComponentAt(1);
                name.save();
                name = (panelTxt) Panel.getComponentAt(2);
                name.save();
                name = (panelTxt) Panel.getComponentAt(3);
                name.save();

                Panel.remove(0);
                Panel.remove(0);
                Panel.remove(0);
                Panel.remove(0);

                this.Menu3.enable();
                this.Menu1.disable();
                this.Menu2.disable();
            }
        }

    }
    public static int contadoR = 0;

    private void GifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GifActionPerformed
        JOptionPane.showMessageDialog(this, "Seleccione la ruta donde se guardara el archivo");
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int seleccion = fc.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            for (int i = 0; i < Panel.getTabCount(); i++) {
                EditorGrafico href = (EditorGrafico) Panel.getComponentAt(i);
                href.tmp.getList().get(href.pos).setPaint(href.saveColors());
                generarImage images = new generarImage(href, true, fc.getSelectedFile().getAbsolutePath());
                images.crearPNG();
            }

        }


    }//GEN-LAST:event_GifActionPerformed

    private void PngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PngActionPerformed
        JOptionPane.showMessageDialog(this, "Seleccione la ruta donde se guardara el archivo");
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int seleccion = fc.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < Panel.getTabCount(); i++) {
                EditorGrafico href = (EditorGrafico) Panel.getComponentAt(i);
                href.tmp.getList().get(href.pos).setPaint(href.saveColors());
                generarImage images = new generarImage(href, false, fc.getSelectedFile().getAbsolutePath());

                images.crearPNG();
            }
        }

    }//GEN-LAST:event_PngActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        this.Menu3.disable();
        this.Menu1.enable();
        this.Menu2.enable();
        Panel.removeAll();

    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        try {
            panelTxt name = (panelTxt) Panel.getSelectedComponent();
            name.save();
        } catch (NullPointerException ex) {
        }

    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        try {
            open("manual de usuario.pdf");
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        try {
            open("Manueal tecnico.pdf");
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        JDialog f = new JDialog(this);
        f.setSize(720, 500);
        f.setResizable(false);
        f.add(new AcercaDe());
        f.show();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        all(1);
    }//GEN-LAST:event_jMenuItem16ActionPerformed
    private void open(String name) throws IOException {
        File path = new File("../documentos/" + name);
        Desktop.getDesktop().open(path);
    }

    public boolean iniciarErrores(int type) {
        int aux = 0;
        switch (type) {
            case 4:
                try {
                    Panel.remove(lz.lexi);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(lz.sintact);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(lz.seman);
                } catch (Exception e) {
                }
                if (this.lienzo == null) {
                    return false;
                }
                lz = new lienzo(this.lienzo.getTexto().getText());

                if (!lz.getErroresSintacticos().isEmpty()) {
                    lz.sintact = new panelError();
                    lz.sintact.init(lz.getErroresSintacticos());
                    Panel.addTab("Sintatico de lienzo", lz.sintact);
                    Panel.setSelectedComponent(lz.sintact);
                    aux++;
                }
                if (!lz.getErroresLexico().isEmpty()) {
                    lz.lexi = new panelError();
                    lz.lexi.init(lz.getErroresLexico());
                    Panel.addTab("Lexicos de lienzo", lz.lexi);
                    Panel.setSelectedComponent(lz.lexi);
                    aux++;
                }
                if (!lz.getErroresSemanticos().isEmpty()) {
                    lz.seman = new panelError();
                    lz.seman.init2(lz.getErroresSemanticos());
                    Panel.addTab("Semantico de lienzo", lz.seman);
                    Panel.setSelectedComponent(lz.seman);
                    aux++;
                }

                break;

            case 1:
                try {
                    Panel.remove(tmp.lexi);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(tmp.sintact);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(tmp.seman);
                } catch (Exception e) {
                }
                if (this.tiempo == null) {
                    return false;
                }
                tmp = new Time(this.tiempo.getTexto().getText());
                if (!tmp.getErroresSintacticos().isEmpty()) {
                    tmp.sintact = new panelError();
                    tmp.sintact.init(tmp.getErroresSintacticos());
                    Panel.addTab("Sintatico de tiempo", tmp.sintact);
                    Panel.setSelectedComponent(tmp.sintact);
                    aux++;
                }

                if (!tmp.getErroresLexico().isEmpty()) {
                    tmp.lexi = new panelError();
                    tmp.lexi.init(tmp.getErroresLexico());
                    Panel.addTab("Lexico de tiempo", tmp.lexi);
                    Panel.setSelectedComponent(tmp.lexi);
                    aux++;
                }
                if (!tmp.getErroresSemanticos().isEmpty()) {
                    tmp.seman = new panelError();
                    tmp.seman.init2(tmp.getErroresSemanticos());
                    Panel.addTab("Semantico de tiempo", tmp.seman);
                    Panel.setSelectedComponent(tmp.seman);
                    aux++;
                }
                break;
            case 2:
                try {
                    Panel.remove(clr.lexi);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(clr.sintact);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(clr.seman);
                } catch (Exception e) {
                }
                if (this.colores == null) {
                    return false;
                }
                clr = new Colores(this.colores.getTexto().getText());

                clr.init();
                if (!clr.getErroresSintacticos().isEmpty()) {
                    clr.sintact = new panelError();
                    clr.sintact.init(clr.getErroresSintacticos());
                    Panel.addTab("Sintatico de colores", clr.sintact);
                    Panel.setSelectedComponent(clr.sintact);
                    aux++;
                }
                if (!clr.getErroresLexico().isEmpty()) {
                    clr.lexi = new panelError();
                    clr.lexi.init(clr.getErroresLexico());
                    Panel.addTab("Lexico de colores", clr.lexi);
                    Panel.setSelectedComponent(clr.lexi);
                    aux++;
                }
                if (!clr.getErroresSemanticos().isEmpty()) {
                    clr.seman = new panelError();
                    clr.seman.init2(clr.getErroresSemanticos());
                    Panel.addTab("Semantico de colores", clr.seman);
                    Panel.setSelectedComponent(clr.seman);
                    aux++;
                }
                break;
            case 3:
                try {
                    Panel.remove(pnt.lexi);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(pnt.sintact);
                } catch (Exception e) {
                }
                try {
                    Panel.remove(pnt.seman);
                } catch (Exception e) {
                }
                System.out.println("Texto a anlizar?" + this.codigo.getTexto().getText());
                if (this.codigo == null) {
                    return false;
                }
                pnt = new Codigo(this.codigo.getTexto().getText());

                if (!pnt.getErroresSintacticos().isEmpty()) {
                    pnt.sintact = new panelError();
                    pnt.sintact.init(pnt.getErroresSintacticos());
                    Panel.addTab("Sintatico de codigo", pnt.sintact);
                    Panel.setSelectedComponent(pnt.sintact);
                    aux++;
                }
                if (!pnt.getErroresLexico().isEmpty()) {
                    pnt.lexi = new panelError();
                    pnt.lexi.init(pnt.getErroresLexico());
                    Panel.addTab("Sintatico de codigo", pnt.lexi);
                    Panel.setSelectedComponent(pnt.lexi);
                    aux++;
                }
                if (!pnt.getErroresSemanticos().isEmpty()) {
                    pnt.seman = new panelError();
                    pnt.seman.init(pnt.getErroresSemanticos());
                    Panel.addTab("Sintatico de codigo", pnt.seman);
                    Panel.setSelectedComponent(pnt.seman);
                    aux++;
                }
                aux += analizarInstancia();
                break;
        }
        return aux == 0;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorDeTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorDeTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorDeTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorDeTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorDeTexto().setVisible(true);
            }
        });
    }

    public int analizarInstancia() {

        Object obj = null;
        try {
            ClassLoader classLoader = ClassLoader.getSystemClassLoader();
            //Obteniedo la instancia
            Class cls = classLoader.loadClass("AnalizadorPnt.instancia" + contadoR);
            //Declarando el tipo de parametros []
            Class partypes[] = new Class[3];
            partypes[0] = ArrayList.class;
            partypes[1] = ArrayList.class;
            partypes[2] = ArrayList.class;
            //Obteniendo el constructor con parametros de  tipo partypes
            Constructor cr = cls.getConstructor(partypes);
            //Objecto de parametros
            Object args[] = new Object[3];
            try {
                args[0] = this.lz.getLienzos();
            } catch (NullPointerException e) {

            }
            try {
                args[1] = this.clr.listado;
            } catch (NullPointerException e) {

            }
            try {
                args[2] = this.tmp.listTime;
            } catch (NullPointerException e) {

            }
            obj = cr.newInstance(args);
            Method method, method2;
            method = obj.getClass().getDeclaredMethod("mainMethod");
            method.invoke(obj);
            method2 = obj.getClass().getDeclaredMethod("getSemanticos");
            ArrayList<Errors> l = (ArrayList<Errors>) method2.invoke(obj);
            if (!l.isEmpty()) {
                pnt.seman = new panelError();
                pnt.seman.init2(l);
                Panel.addTab("Semantico", pnt.seman);
                Panel.setSelectedComponent(pnt.seman);
            } else {
                return 0;
            }

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SecurityException | IllegalArgumentException | NoSuchMethodException | InvocationTargetException ex) {

        }

        return 10;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Gif;
    private javax.swing.JMenu Menu1;
    private javax.swing.JMenu Menu2;
    private javax.swing.JMenu Menu3;
    public static javax.swing.JTabbedPane Panel;
    private javax.swing.JMenuItem Png;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
