
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 08 22:52:15 CST 2020
//----------------------------------------------------

package AnalizadorLienzos;


import drawgif.Errors;
import java.awt.Color;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import static AnalizadorLienzos.parserLienzo.cadenaNombre;
import static AnalizadorLienzos.parserLienzo.erroresSintacticos;
import static AnalizadorLienzos.parserLienzo.fondo;
import static AnalizadorLienzos.parserLienzo.identifi;
import static AnalizadorLienzos.parserLienzo.lienzos;
import static AnalizadorLienzos.parserLienzo.pix;
import static AnalizadorLienzos.parserLienzo.posx;
import static AnalizadorLienzos.parserLienzo.posy;
import static AnalizadorLienzos.parserLienzo.type;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 08 22:52:15 CST 2020
  */
public class parserLienzo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserLienzo() {super();}

  /** Constructor which sets the default scanner. */
  public parserLienzo(java_cup.runtime.Scanner s) {super(s);
  erroresSemanticos=new ArrayList<>();
  erroresSintacticos=new ArrayList<>();
  lienzos=new ArrayList<>();
  }

  /** Constructor which sets the default scanner. */
  public parserLienzo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\012\000\002\002" +
    "\013\000\002\002\012\000\002\002\011\000\002\002\010" +
    "\000\002\002\007\000\002\002\005\000\002\002\004\000" +
    "\002\003\007\000\002\003\007\000\002\003\006\000\002" +
    "\003\005\000\002\003\004\000\002\005\004\000\002\005" +
    "\002\000\002\005\005\000\002\004\011\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\007\000\002\007\010\000\002\007\007\000\002" +
    "\007\006\000\002\022\007\000\002\022\010\000\002\022" +
    "\007\000\002\022\006\000\002\010\007\000\002\010\010" +
    "\000\002\010\007\000\002\010\006\000\002\010\004\000" +
    "\002\012\015\000\002\012\005\000\002\012\016\000\002" +
    "\012\015\000\002\012\014\000\002\012\013\000\002\012" +
    "\012\000\002\012\011\000\002\012\010\000\002\012\007" +
    "\000\002\012\006\000\002\012\004\000\002\011\007\000" +
    "\002\011\010\000\002\011\007\000\002\011\006\000\002" +
    "\013\007\000\002\013\010\000\002\013\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\016\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\002\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\003\005\004\006\001\002\000\004\002" +
    "\361\001\002\000\016\003\013\004\325\005\326\006\324" +
    "\007\322\026\012\001\002\000\004\007\007\001\002\000" +
    "\004\006\010\001\002\000\004\004\011\001\002\000\006" +
    "\003\013\026\012\001\002\000\004\006\316\001\002\000" +
    "\022\003\041\004\037\005\032\006\042\010\030\011\040" +
    "\012\035\014\036\001\002\000\010\003\015\005\ufff2\013" +
    "\016\001\002\000\004\013\023\001\002\000\006\003\013" +
    "\026\012\001\002\000\004\005\020\001\002\000\004\005" +
    "\021\001\002\000\004\002\000\001\002\000\004\005\ufff3" +
    "\001\002\000\006\003\013\026\012\001\002\000\004\005" +
    "\ufff1\001\002\000\004\005\315\001\002\000\006\005\uffec" +
    "\013\uffec\001\002\000\006\005\uffed\013\uffed\001\002\000" +
    "\004\006\311\001\002\000\006\005\uffee\013\uffee\001\002" +
    "\000\010\003\ufff4\005\ufff4\013\ufff4\001\002\000\006\005" +
    "\uffef\013\uffef\001\002\000\004\013\303\001\002\000\004" +
    "\006\277\001\002\000\004\006\273\001\002\000\014\003" +
    "\041\010\030\011\040\012\035\014\036\001\002\000\004" +
    "\006\265\001\002\000\022\004\051\005\054\006\052\010" +
    "\053\011\050\012\047\014\046\033\055\001\002\000\004" +
    "\004\043\001\002\000\014\003\041\010\030\011\040\012" +
    "\035\014\036\001\002\000\004\005\045\001\002\000\010" +
    "\003\ufff7\005\ufff7\013\ufff7\001\002\000\004\006\257\001" +
    "\002\000\004\006\251\001\002\000\004\006\245\001\002" +
    "\000\022\003\125\015\115\016\130\017\120\020\121\021" +
    "\116\022\132\031\122\001\002\000\006\004\107\033\110" +
    "\001\002\000\004\006\103\001\002\000\006\005\uffdf\013" +
    "\uffdf\001\002\000\020\003\063\023\062\024\056\025\060" +
    "\026\057\027\064\033\uffbf\001\002\000\016\003\063\024" +
    "\056\025\060\026\057\027\064\033\uffbf\001\002\000\016" +
    "\003\063\024\056\025\060\026\057\027\064\033\uffbf\001" +
    "\002\000\016\003\063\024\056\025\060\026\057\027\064" +
    "\033\uffbf\001\002\000\004\033\077\001\002\000\004\033" +
    "\076\001\002\000\012\024\066\025\070\026\067\027\071" +
    "\001\002\000\016\003\063\024\056\025\060\026\057\027" +
    "\064\033\uffbf\001\002\000\004\033\uffc3\001\002\000\016" +
    "\003\063\024\056\025\060\026\057\027\064\033\uffbf\001" +
    "\002\000\016\003\063\024\056\025\060\026\057\027\064" +
    "\033\uffbf\001\002\000\016\003\063\024\056\025\060\026" +
    "\057\027\064\033\uffbf\001\002\000\016\003\063\024\056" +
    "\025\060\026\057\027\064\033\uffbf\001\002\000\004\033" +
    "\uffbe\001\002\000\004\033\uffbb\001\002\000\004\033\uffbd" +
    "\001\002\000\004\033\uffbc\001\002\000\006\005\uffe4\013" +
    "\uffe4\001\002\000\006\005\uffe8\013\uffe8\001\002\000\004" +
    "\033\uffc0\001\002\000\004\033\uffc2\001\002\000\004\033" +
    "\uffc1\001\002\000\004\033\104\001\002\000\016\003\063" +
    "\024\056\025\060\026\057\027\064\033\uffbf\001\002\000" +
    "\004\033\106\001\002\000\006\005\uffea\013\uffea\001\002" +
    "\000\022\003\125\015\115\016\130\017\120\020\121\021" +
    "\116\022\132\031\122\001\002\000\020\003\063\023\112" +
    "\024\056\025\060\026\057\027\064\033\uffbf\001\002\000" +
    "\004\033\114\001\002\000\004\033\113\001\002\000\006" +
    "\005\uffe5\013\uffe5\001\002\000\006\005\uffe9\013\uffe9\001" +
    "\002\000\004\006\uffc6\001\002\000\004\006\237\001\002" +
    "\000\004\005\236\001\002\000\004\006\uffc4\001\002\000" +
    "\004\006\234\001\002\000\004\006\232\001\002\000\006" +
    "\005\uffca\013\uffca\001\002\000\006\005\uffcb\013\uffcb\001" +
    "\002\000\024\006\160\013\154\015\115\016\130\017\120" +
    "\020\121\021\116\022\132\024\156\001\002\000\004\005" +
    "\153\001\002\000\004\006\141\001\002\000\004\006\uffc5" +
    "\001\002\000\004\013\135\001\002\000\004\006\133\001" +
    "\002\000\004\024\134\001\002\000\006\005\uffc7\013\uffc7" +
    "\001\002\000\010\020\121\021\116\022\132\001\002\000" +
    "\004\013\137\001\002\000\010\020\121\021\116\022\132" +
    "\001\002\000\004\005\uffce\001\002\000\004\024\142\001" +
    "\002\000\004\013\143\001\002\000\010\015\115\016\130" +
    "\017\120\001\002\000\004\006\145\001\002\000\004\024" +
    "\146\001\002\000\004\013\147\001\002\000\010\015\115" +
    "\016\130\017\120\001\002\000\004\006\151\001\002\000" +
    "\004\024\152\001\002\000\004\005\uffde\001\002\000\006" +
    "\005\uffe1\013\uffe1\001\002\000\016\015\115\016\130\017" +
    "\120\020\121\021\116\022\132\001\002\000\004\006\206" +
    "\001\002\000\006\005\uffd3\013\176\001\002\000\004\013" +
    "\172\001\002\000\004\024\161\001\002\000\004\013\162" +
    "\001\002\000\010\015\115\016\130\017\120\001\002\000" +
    "\004\006\164\001\002\000\004\024\165\001\002\000\006" +
    "\005\uffd7\013\166\001\002\000\010\015\115\016\130\017" +
    "\120\001\002\000\004\006\170\001\002\000\004\024\171" +
    "\001\002\000\004\005\uffdb\001\002\000\010\020\121\021" +
    "\116\022\132\001\002\000\004\013\174\001\002\000\010" +
    "\020\121\021\116\022\132\001\002\000\004\005\uffcd\001" +
    "\002\000\010\015\115\016\130\017\120\001\002\000\004" +
    "\006\200\001\002\000\004\024\201\001\002\000\006\005" +
    "\uffd6\013\202\001\002\000\010\015\115\016\130\017\120" +
    "\001\002\000\004\006\204\001\002\000\004\024\205\001" +
    "\002\000\004\005\uffda\001\002\000\004\024\207\001\002" +
    "\000\006\005\uffd4\013\210\001\002\000\010\015\115\016" +
    "\130\017\120\001\002\000\004\006\212\001\002\000\004" +
    "\024\213\001\002\000\006\005\uffd8\013\214\001\002\000" +
    "\010\015\115\016\130\017\120\001\002\000\004\006\216" +
    "\001\002\000\004\024\217\001\002\000\004\005\uffdc\001" +
    "\002\000\004\006\224\001\002\000\004\013\222\001\002" +
    "\000\010\020\121\021\116\022\132\001\002\000\004\005" +
    "\uffcc\001\002\000\004\024\225\001\002\000\006\005\uffd5" +
    "\013\226\001\002\000\010\015\115\016\130\017\120\001" +
    "\002\000\004\006\230\001\002\000\004\024\231\001\002" +
    "\000\004\005\uffd9\001\002\000\004\032\233\001\002\000" +
    "\004\005\uffdd\001\002\000\004\024\235\001\002\000\006" +
    "\005\uffc9\013\uffc9\001\002\000\006\005\uffd0\013\uffd0\001" +
    "\002\000\004\024\240\001\002\000\006\005\uffc8\013\uffc8" +
    "\001\002\000\004\005\244\001\002\000\004\005\243\001" +
    "\002\000\006\005\uffe0\013\uffe0\001\002\000\006\005\uffcf" +
    "\013\uffcf\001\002\000\004\033\246\001\002\000\004\023" +
    "\247\001\002\000\004\033\250\001\002\000\006\005\uffe6" +
    "\013\uffe6\001\002\000\004\004\252\001\002\000\014\003" +
    "\253\015\115\016\130\017\120\031\122\001\002\000\016" +
    "\006\160\013\256\015\115\016\130\017\120\024\156\001" +
    "\002\000\004\005\255\001\002\000\006\005\uffe2\013\uffe2" +
    "\001\002\000\010\015\115\016\130\017\120\001\002\000" +
    "\004\004\260\001\002\000\012\003\261\020\121\021\116" +
    "\022\132\001\002\000\012\013\264\020\121\021\116\022" +
    "\132\001\002\000\004\005\263\001\002\000\006\005\uffd1" +
    "\013\uffd1\001\002\000\010\020\121\021\116\022\132\001" +
    "\002\000\004\033\266\001\002\000\004\023\267\001\002" +
    "\000\004\033\270\001\002\000\006\005\uffe7\013\uffe7\001" +
    "\002\000\004\005\272\001\002\000\010\003\ufff6\005\ufff6" +
    "\013\ufff6\001\002\000\004\004\274\001\002\000\012\003" +
    "\261\020\121\021\116\022\132\001\002\000\004\005\276" +
    "\001\002\000\006\005\uffd2\013\uffd2\001\002\000\004\004" +
    "\300\001\002\000\014\003\253\015\115\016\130\017\120" +
    "\031\122\001\002\000\004\005\302\001\002\000\006\005" +
    "\uffe3\013\uffe3\001\002\000\014\003\041\010\030\011\040" +
    "\012\035\014\036\001\002\000\004\013\305\001\002\000" +
    "\014\003\041\010\030\011\040\012\035\014\036\001\002" +
    "\000\004\013\307\001\002\000\014\003\041\010\030\011" +
    "\040\012\035\014\036\001\002\000\004\005\ufff0\001\002" +
    "\000\004\033\312\001\002\000\016\003\063\024\056\025" +
    "\060\026\057\027\064\033\uffbf\001\002\000\004\033\314" +
    "\001\002\000\006\005\uffeb\013\uffeb\001\002\000\010\003" +
    "\ufff5\005\ufff5\013\ufff5\001\002\000\004\004\317\001\002" +
    "\000\014\003\041\010\030\011\040\012\035\014\036\001" +
    "\002\000\004\005\321\001\002\000\010\003\ufff8\005\ufff8" +
    "\013\ufff8\001\002\000\004\006\353\001\002\000\010\003" +
    "\015\005\ufff2\013\016\001\002\000\004\004\343\001\002" +
    "\000\010\003\013\007\330\026\012\001\002\000\006\002" +
    "\ufff9\005\327\001\002\000\004\002\ufffa\001\002\000\004" +
    "\006\335\001\002\000\010\003\015\005\ufff2\013\016\001" +
    "\002\000\004\005\333\001\002\000\004\005\334\001\002" +
    "\000\004\002\ufffc\001\002\000\004\004\336\001\002\000" +
    "\006\003\013\026\012\001\002\000\010\003\015\005\ufff2" +
    "\013\016\001\002\000\004\005\341\001\002\000\004\005" +
    "\342\001\002\000\004\002\uffff\001\002\000\006\003\013" +
    "\026\012\001\002\000\010\003\015\005\ufff2\013\016\001" +
    "\002\000\004\005\346\001\002\000\004\005\347\001\002" +
    "\000\004\002\ufffd\001\002\000\004\005\351\001\002\000" +
    "\004\005\352\001\002\000\004\002\ufffb\001\002\000\004" +
    "\004\354\001\002\000\006\003\013\026\012\001\002\000" +
    "\010\003\015\005\ufff2\013\016\001\002\000\004\005\357" +
    "\001\002\000\004\005\360\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\013\001\001\000\002\001" +
    "\001\000\016\004\024\006\033\007\032\010\030\011\026" +
    "\022\025\001\001\000\004\005\016\001\001\000\002\001" +
    "\001\000\004\003\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\270\006" +
    "\033\007\032\010\030\011\026\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\043\006\033\007\032\010\030\011\026\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\241\013\240" +
    "\014\130\016\123\017\122\020\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\060" +
    "\001\001\000\004\021\101\001\001\000\004\021\100\001" +
    "\001\000\004\021\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\064\001\001\000" +
    "\002\001\001\000\004\021\074\001\001\000\004\021\073" +
    "\001\001\000\004\021\072\001\001\000\004\021\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\125\013\116\014\130\016\123" +
    "\017\122\020\126\001\001\000\004\021\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\156\016" +
    "\123\017\122\020\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\135" +
    "\016\123\017\122\001\001\000\002\001\001\000\010\014" +
    "\137\016\123\017\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\220\016\123" +
    "\017\122\020\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\172\016\123\017\122\001\001\000\002\001\001\000\010" +
    "\014\174\016\123\017\122\001\001\000\002\001\001\000" +
    "\004\020\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\222" +
    "\016\123\017\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\253" +
    "\020\126\001\001\000\004\020\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\217\001\001\000\002" +
    "\001\001\000\012\013\261\014\130\016\123\017\122\001" +
    "\001\000\010\014\156\016\123\017\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\220\016\123\017" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\274\014\130\016\123" +
    "\017\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\300\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\303\007\032\010" +
    "\030\011\026\022\025\001\001\000\002\001\001\000\014" +
    "\006\305\007\032\010\030\011\026\022\025\001\001\000" +
    "\002\001\001\000\014\006\307\007\032\010\030\011\026" +
    "\022\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\317\006" +
    "\033\007\032\010\030\011\026\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\347\001\001\000\002\001\001\000\004\003\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\336\001" +
    "\001\000\004\005\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\343\001\001\000" +
    "\004\005\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\354\001\001" +
    "\000\004\005\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserLienzo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserLienzo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserLienzo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static ArrayList<Errors> erroresSintacticos;
public static Color fondo;
public static int posx,posy,pix;
public static String identifi,cadenaNombre,type;
public static ArrayList<Errors> erroresSemanticos;
public static ArrayList<lienzo> lienzos;
   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
       erroresSintacticos.add(new Errors((String)s.value,"",-1,s.left,s.right));
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
        erroresSintacticos.add(new Errors((String)s.value,"",-1,s.left,s.right));
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserLienzo$actions {
  private final parserLienzo parser;

  /** Constructor */
  CUP$parserLienzo$actions(parserLienzo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserLienzo$do_action(
    int                        CUP$parserLienzo$act_num,
    java_cup.runtime.lr_parser CUP$parserLienzo$parser,
    java.util.Stack            CUP$parserLienzo$stack,
    int                        CUP$parserLienzo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserLienzo$result;

      /* select the action based on the action number */
      switch (CUP$parserLienzo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRING ::= error Double STRING 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRING ::= error Numero STRING 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRING ::= error Id STRING 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRING ::= error Cadena STRING 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRING ::= 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRING ::= Double STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		cadenaNombre+=" "+String.valueOf(e);
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRING ::= Numero STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		cadenaNombre+=" "+String.valueOf(e);
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRING ::= Id STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		cadenaNombre+=" "+String.valueOf(e);
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRING ::= Cadena STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		cadenaNombre+=" "+String.valueOf(e);
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // K ::= Azul 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("K",14, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // K ::= Verde 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("K",14, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // K ::= Rojo 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("K",14, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // POSY ::= Posy dosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
posy=Integer.parseInt((String)e);

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("POSY",13, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // POSX ::= Posx dosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
posx=Integer.parseInt((String)e);

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("POSX",12, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIZE ::= Cuadro dosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		 pix=Integer.parseInt((String)e); RESULT=3;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("SIZE",10, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIZE ::= POSY 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("SIZE",10, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIZE ::= POSX 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("SIZE",10, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Y ::= error coma SIZE coma SIZE 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("Y",9, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Y ::= error SIZE coma SIZE coma SIZE 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("Y",9, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Y ::= SIZE coma SIZE coma SIZE 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object c3 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
int x1=(int)c1;
int x2=(int)c2;
int x3=(int)c3;
                   if (x1 == x2) {
                        erroresSintacticos.add(new Errors("Error mismos atributos", "Se repite la propiedad", -1, c2left, c2right));

                    }
                    if (x1 == x3) {
                        erroresSintacticos.add(new Errors("Error mismos atributos", "Se repite la propiedad", -1, c3left, c3right));

                    }
                    if (x2 == x3) {
                        erroresSintacticos.add(new Errors("Error mismos atributos", "Se repite la propiedad", -1, c3left, c3right));
                    }
                

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("Y",9, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // D3 ::= error abreLlaves Y cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D3",7, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // D3 ::= error dosPuntos abreLlaves Y cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D3",7, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // D3 ::= error Size dosPuntos abreLlaves Y cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D3",7, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // D3 ::= Size dosPuntos abreLlaves Y cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D3",7, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COLORS ::= error Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COLORS ::= error K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COLORS ::= error coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COLORS ::= error Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COLORS ::= error dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COLORS ::= error K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-7)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COLORS ::= error coma K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-8)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COLORS ::= error Numero coma K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-9)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COLORS ::= error dosPuntos Numero coma K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-10)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COLORS ::= error K dosPuntos Numero coma K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-11)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COLORS ::= Hex dosPuntos Letter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
Color clr=new Color(0,0,0);
clr.decode((String)e);
RESULT=clr;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COLORS ::= K dosPuntos Numero coma K dosPuntos Numero coma K dosPuntos Numero 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-10)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-10)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-8)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).right;
		Object c3 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
int x1=(int)c1;
int x2=(int)c2;
int x3=(int)c3;
int red=0,blue=0,green=0;
int d1=Integer.parseInt((String)e1);
int d2=Integer.parseInt((String)e2);
int d3=Integer.parseInt((String)e3);
 if ((x1 + x2 + x3) != 6) {
                    if (x1 == x2) {
                        erroresSintacticos.add(new Errors("El color Rojo se repite", "Se repite la propiedad", -1, c2left, c2right));

                    }
                    if (x1 == x3) {
                        erroresSintacticos.add(new Errors("El color Rojo se repite", "Se repite la propiedad", -1, c3left, c3right));

                    }
                    if (x2 == x3) {
                        erroresSintacticos.add(new Errors("El color Verde se repite", "Se repite la propiedad", -1, c3left, c3right));

                    }
                }
switch(x1){
case 1:
red=d1;
break;
case 2:
green=d1;
break;
case 3:
blue=d1;
break;
}
switch(x2){
case 1:
red=d2;
break;
case 2:
green=d2;
break;
case 3:
blue=d2;
break;
}
switch(x3){
case 1:
red=d3;
break;
case 2:
green=d3;
break;
case 3:
blue=d3;
break;
}
RESULT=new Color(red,green,blue);


              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("COLORS",8, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-10)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D2 ::= error cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D2",6, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D2 ::= error abreLlaves COLORS cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D2",6, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D2 ::= error dosPuntos abreLlaves COLORS cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D2",6, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D2 ::= error Fond dosPuntos abreLlaves COLORS cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D2",6, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D2 ::= Fond dosPuntos abreLlaves COLORS cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		fondo=(Color)e;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D2",6, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // D4 ::= error COM Image COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D4",16, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // D4 ::= error dosPuntos COM Image COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D4",16, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // D4 ::= error type dosPuntos COM Image COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D4",16, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D4 ::= type dosPuntos COM Image COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		
type=(String)e;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D4",16, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // D1 ::= error COM STRING COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D1",5, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D1 ::= error dosPuntos COM STRING COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D1",5, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D1 ::= error Nombre dosPuntos COM STRING COM 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D1",5, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // D1 ::= Nombre dosPuntos COM STRING COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("D1",5, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // V ::= D4 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // V ::= D3 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // V ::= D2 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // V ::= D1 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= V coma V coma V coma V 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.peek()).value;
		
int x=(int)e1;
int x2=(int)e2;
int x3=(int)e3;
int x4=(int)e4;
                System.out.println(x+" "+x2+" "+x3+" "+x4+" ->");
if(x==x2){
erroresSintacticos.add(new Errors("Error, se repite","Se repite la propiedad",-1,e2left,e2right));
} if(x==x3){
erroresSintacticos.add(new Errors("Error, se repite","Se repite la propiedad",-1,e3left,e3right));
} if(x==x4){
erroresSintacticos.add(new Errors("Error, se repite","Se repite la propiedad",-1,e4left,e4right));
} if(x2==x3){
erroresSintacticos.add(new Errors("Error  se repite","Se repite la propiedad",-1,e3left,e3right));
} if(x2==x4){
erroresSintacticos.add(new Errors("Error  se repite","Se repite la propiedad",-1,e3left,e3right));
} if(x3==x4){
erroresSintacticos.add(new Errors("Error  se repite","Se repite la propiedad",-1,e3left,e3right));
}

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // F ::= error coma DATOS 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // F ::= 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= coma DATOS 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATOS ::= error cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("DATOS",1, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATOS ::= error C cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("DATOS",1, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATOS ::= error abreLlaves C cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("DATOS",1, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATOS ::= error dosPuntos abreLlaves C cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("DATOS",1, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATOS ::= Id dosPuntos abreLlaves C cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)).value;
		
identifi=(String)e;
String array[]=cadenaNombre.split(" ");
cadenaNombre="";
                for (int i = array.length-1; i >=0 ; i--) {
                    String string = array[i];
                    if(!string.equals("null")){
                    cadenaNombre+=string+" ";
                    }
                }
 lienzo tmp = new lienzo(identifi, cadenaNombre, type, fondo, pix, posx, posy);
                boolean v = true;
                for (int i = 0; i < lienzos.size(); i++) {
                    if (lienzos.get(i).Id.equals(identifi)) {
                        v = false;
                        break;
                    }

                }
                if (!v) {
                    parserLienzo.erroresSemanticos.add(new Errors(identifi, "Identificador existente", 0, eleft, eright));

                }
                lienzos.add(tmp);
                
                cadenaNombre = "";

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("DATOS",1, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A ::= error cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A ::= error cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A ::= error DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= error abreLlaves DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-5)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= error dosPuntos abreLlaves DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-6)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= error Lienzos dosPuntos abreLlaves DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-7)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= error abreLlaves Lienzos dosPuntos abreLlaves DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-8)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= abreLlaves Lienzos dosPuntos abreLlaves DATOS F cierraLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-7)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          return CUP$parserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)).value;
		RESULT = start_val;
              CUP$parserLienzo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.elementAt(CUP$parserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$parserLienzo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserLienzo$parser.done_parsing();
          return CUP$parserLienzo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

