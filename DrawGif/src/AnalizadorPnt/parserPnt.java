//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 23 12:52:02 CST 2020
//----------------------------------------------------
package AnalizadorPnt;

import static AnalizadorPnt.parserPnt.Semanticos;
import static AnalizadorPnt.parserPnt.Variables;
import static AnalizadorPnt.parserPnt.containsBool;
import static AnalizadorPnt.parserPnt.containsLleter;
import static AnalizadorPnt.parserPnt.getObj;
import static AnalizadorPnt.parserPnt.tablaForInt;
import static AnalizadorPnt.parserPnt.MetodoS;
import static AnalizadorPnt.parserPnt.NumMethod;
import TablaDeSimbolos.tablaInt;

import drawgif.Errors;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Sat May 23 12:52:02 CST 2020
 */
public class parserPnt extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parserPnt() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parserPnt(java_cup.runtime.Scanner s) {
        super(s);
        NumMethod=0;
        MetodoS="";
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parserPnt(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\167\000\002\002\004\000\002\035\003\000\002\035"
        + "\003\000\002\035\003\000\002\035\003\000\002\035\003"
        + "\000\002\035\003\000\002\105\003\000\002\105\003\000"
        + "\002\106\005\000\002\062\004\000\002\062\002\000\002"
        + "\002\004\000\002\003\005\000\002\003\003\000\002\004"
        + "\004\000\002\004\004\000\002\004\004\000\002\075\005"
        + "\000\002\077\005\000\002\005\004\000\002\005\002\000"
        + "\002\100\004\000\002\100\003\000\002\100\004\000\002"
        + "\101\004\000\002\101\006\000\002\101\004\000\002\104"
        + "\005\000\002\006\004\000\002\006\002\000\002\102\004"
        + "\000\002\102\003\000\002\102\004\000\002\103\004\000"
        + "\002\103\006\000\002\103\004\000\002\007\004\000\002"
        + "\007\002\000\002\073\004\000\002\073\003\000\002\073"
        + "\004\000\002\074\004\000\002\074\006\000\002\074\004"
        + "\000\002\010\003\000\002\010\004\000\002\010\004\000"
        + "\002\011\005\000\002\011\003\000\002\012\005\000\002"
        + "\012\003\000\002\015\003\000\002\015\005\000\002\015"
        + "\003\000\002\015\003\000\002\013\003\000\002\013\003"
        + "\000\002\014\003\000\002\014\003\000\002\020\004\000"
        + "\002\020\002\000\002\076\003\000\002\076\003\000\002"
        + "\076\003\000\002\076\003\000\002\057\004\000\002\057"
        + "\004\000\002\061\005\000\002\061\003\000\002\071\004"
        + "\000\002\071\002\000\002\021\005\000\002\021\003\000"
        + "\002\060\005\000\002\060\003\000\002\060\006\000\002"
        + "\023\005\000\002\023\003\000\002\037\006\000\002\037"
        + "\003\000\002\065\003\000\002\065\003\000\002\065\005"
        + "\000\002\066\005\000\002\066\003\000\002\067\005\000"
        + "\002\067\003\000\002\070\003\000\002\070\005\000\002"
        + "\070\003\000\002\070\005\000\002\025\011\000\002\025"
        + "\003\000\002\024\003\000\002\024\003\000\002\024\003"
        + "\000\002\024\003\000\002\026\006\000\002\026\004\000"
        + "\002\027\003\000\002\027\004\000\002\027\004\000\002"
        + "\030\010\000\002\031\007\000\002\031\005\000\002\032"
        + "\015\000\002\032\005\000\002\034\003\000\002\034\005"
        + "\000\002\042\005\000\002\042\004\000\002\042\004\000"
        + "\002\051\004\000\002\051\002\000\002\072\004\000\002"
        + "\072\002\000\002\064\004\000\002\064\002"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\322\000\006\003\006\004\007\001\002\000\006\003"
        + "\222\036\223\001\002\000\004\002\220\001\002\000\014"
        + "\003\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\001\002\000"
        + "\004\005\216\001\002\000\014\003\017\006\016\007\015"
        + "\011\021\012\014\001\002\000\010\003\203\013\206\014"
        + "\204\001\002\000\010\003\171\013\174\014\173\001\002"
        + "\000\010\003\155\013\161\014\157\001\002\000\004\010"
        + "\107\001\002\000\004\010\067\001\002\000\006\003\uffd4"
        + "\036\uffd4\001\002\000\014\003\017\006\016\007\015\011"
        + "\021\012\014\001\002\000\006\003\ufff5\036\ufff5\001\002"
        + "\000\004\010\024\001\002\000\014\003\017\006\016\007"
        + "\015\011\021\012\014\001\002\000\006\003\uffd3\036\uffd3"
        + "\001\002\000\012\003\uffe3\013\uffe3\014\uffe3\015\025\001"
        + "\002\000\012\010\027\022\033\023\035\031\034\001\002"
        + "\000\010\003\uffe5\013\uffe5\014\uffe5\001\002\000\044\003"
        + "\uffa7\006\uffa7\010\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7"
        + "\020\uffa7\021\uffa7\024\uffa7\027\uffa7\034\uffa7\037\uffa7\041"
        + "\uffa7\042\uffa7\044\uffa7\045\uffa7\001\002\000\044\003\uffaa"
        + "\006\uffaa\010\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020"
        + "\063\021\064\024\uffaa\027\uffaa\034\uffaa\037\uffaa\041\uffaa"
        + "\042\uffaa\044\uffaa\045\uffaa\001\002\000\040\003\uffac\006"
        + "\uffac\010\uffac\013\uffac\014\uffac\016\057\017\056\024\uffac"
        + "\027\uffac\034\uffac\037\uffac\041\uffac\042\uffac\044\uffac\045"
        + "\uffac\001\002\000\010\003\uffe4\013\uffe4\014\uffe4\001\002"
        + "\000\044\003\uffa9\006\uffa9\010\uffa9\013\uffa9\014\uffa9\016"
        + "\uffa9\017\uffa9\020\uffa9\021\uffa9\024\uffa9\027\uffa9\034\uffa9"
        + "\037\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\001\002\000"
        + "\026\010\042\016\050\017\052\020\043\021\041\022\046"
        + "\023\053\024\051\026\044\031\uffc4\001\002\000\012\010"
        + "\027\022\033\023\035\031\034\001\002\000\004\024\037"
        + "\001\002\000\044\003\uffa8\006\uffa8\010\uffa8\013\uffa8\014"
        + "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\024\uffa8\027\uffa8"
        + "\034\uffa8\037\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\001"
        + "\002\000\004\031\055\001\002\000\026\010\ufffd\016\ufffd"
        + "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026"
        + "\ufffd\031\ufffd\001\002\000\026\010\uffc2\016\uffc2\017\uffc2"
        + "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\031"
        + "\uffc2\001\002\000\026\010\ufffe\016\ufffe\017\ufffe\020\ufffe"
        + "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\031\ufffe\001"
        + "\002\000\026\010\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3"
        + "\022\uffc3\023\uffc3\024\uffc3\026\uffc3\031\uffc3\001\002\000"
        + "\026\010\042\016\050\017\052\020\043\021\041\022\046"
        + "\023\053\024\051\026\044\031\uffc4\001\002\000\026\010"
        + "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1"
        + "\024\uffc1\026\uffc1\031\uffc1\001\002\000\026\010\uffc0\016"
        + "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0"
        + "\026\uffc0\031\uffc0\001\002\000\026\010\000\016\000\017"
        + "\000\020\000\021\000\022\000\023\000\024\000\026\000"
        + "\031\000\001\002\000\026\010\ufffb\016\ufffb\017\ufffb\020"
        + "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\031\ufffb"
        + "\001\002\000\026\010\uffff\016\uffff\017\uffff\020\uffff\021"
        + "\uffff\022\uffff\023\uffff\024\uffff\026\uffff\031\uffff\001\002"
        + "\000\026\010\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022"
        + "\ufffc\023\ufffc\024\ufffc\026\ufffc\031\ufffc\001\002\000\004"
        + "\031\uffc5\001\002\000\044\003\uffa6\006\uffa6\010\uffa6\013"
        + "\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\024\uffa6"
        + "\027\uffa6\034\uffa6\037\uffa6\041\uffa6\042\uffa6\044\uffa6\045"
        + "\uffa6\001\002\000\014\010\uffc6\022\uffc6\023\uffc6\025\uffc6"
        + "\031\uffc6\001\002\000\014\010\uffc7\022\uffc7\023\uffc7\025"
        + "\uffc7\031\uffc7\001\002\000\012\010\027\022\033\023\035"
        + "\031\034\001\002\000\034\003\uffad\006\uffad\010\uffad\013"
        + "\uffad\014\uffad\024\uffad\027\uffad\034\uffad\037\uffad\041\uffad"
        + "\042\uffad\044\uffad\045\uffad\001\002\000\012\010\027\022"
        + "\033\023\035\031\034\001\002\000\014\010\uffc9\022\uffc9"
        + "\023\uffc9\025\uffc9\031\uffc9\001\002\000\014\010\uffc8\022"
        + "\uffc8\023\uffc8\025\uffc8\031\uffc8\001\002\000\040\003\uffab"
        + "\006\uffab\010\uffab\013\uffab\014\uffab\016\uffab\017\uffab\024"
        + "\uffab\027\uffab\034\uffab\037\uffab\041\uffab\042\uffab\044\uffab"
        + "\045\uffab\001\002\000\006\003\uffd2\036\uffd2\001\002\000"
        + "\012\003\uffdb\013\uffdb\014\uffdb\015\071\001\002\000\010"
        + "\003\uffef\013\uffef\014\uffef\001\002\000\012\010\072\022"
        + "\077\023\100\025\073\001\002\000\024\003\uffcb\013\uffcb"
        + "\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\024\uffcb\035"
        + "\uffcb\001\002\000\024\003\uffca\013\uffca\014\uffca\016\uffca"
        + "\017\uffca\020\uffca\021\uffca\024\uffca\035\uffca\001\002\000"
        + "\020\003\uffd0\013\uffd0\014\uffd0\016\057\017\056\024\uffd0"
        + "\035\uffd0\001\002\000\024\003\uffce\013\uffce\014\uffce\016"
        + "\uffce\017\uffce\020\063\021\064\024\uffce\035\uffce\001\002"
        + "\000\010\003\uffdc\013\uffdc\014\uffdc\001\002\000\024\003"
        + "\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd"
        + "\024\uffcd\035\uffcd\001\002\000\012\010\072\022\077\023"
        + "\100\025\073\001\002\000\004\024\102\001\002\000\024"
        + "\003\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021"
        + "\uffcc\024\uffcc\035\uffcc\001\002\000\012\010\072\022\077"
        + "\023\100\025\073\001\002\000\020\003\uffcf\013\uffcf\014"
        + "\uffcf\016\uffcf\017\uffcf\024\uffcf\035\uffcf\001\002\000\012"
        + "\010\072\022\077\023\100\025\073\001\002\000\014\003"
        + "\uffd1\013\uffd1\014\uffd1\024\uffd1\035\uffd1\001\002\000\012"
        + "\003\uffec\013\uffec\014\uffec\015\111\001\002\000\010\003"
        + "\uffee\013\uffee\014\uffee\001\002\000\014\010\114\022\116"
        + "\023\122\030\117\031\121\001\002\000\016\003\uffba\013"
        + "\uffba\014\uffba\024\uffba\044\127\045\131\001\002\000\024"
        + "\003\uffb8\013\uffb8\014\uffb8\016\057\017\056\024\uffb8\027"
        + "\uffb8\044\uffb8\045\uffb8\001\002\000\030\003\uffaf\013\uffaf"
        + "\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf\027"
        + "\uffaf\044\uffaf\045\uffaf\001\002\000\010\003\uffed\013\uffed"
        + "\014\uffed\001\002\000\030\003\uffb0\013\uffb0\014\uffb0\016"
        + "\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\027\uffb0\044\uffb0"
        + "\045\uffb0\001\002\000\016\003\uffb1\013\uffb1\014\uffb1\024"
        + "\uffb1\044\uffb1\045\uffb1\001\002\000\030\003\uffb6\013\uffb6"
        + "\014\uffb6\016\uffb6\017\uffb6\020\063\021\064\024\uffb6\027"
        + "\uffb6\044\uffb6\045\uffb6\001\002\000\026\010\042\016\050"
        + "\017\052\020\043\021\041\022\046\023\053\024\051\026"
        + "\044\031\uffc4\001\002\000\014\010\114\022\116\023\122"
        + "\030\117\031\121\001\002\000\020\003\uffba\013\uffba\014"
        + "\uffba\024\uffba\027\125\044\127\045\131\001\002\000\014"
        + "\010\114\022\116\023\122\030\117\031\121\001\002\000"
        + "\012\010\027\022\033\023\035\031\034\001\002\000\012"
        + "\003\uffbc\013\uffbc\014\uffbc\024\uffbc\001\002\000\014\010"
        + "\ufffa\022\ufffa\023\ufffa\030\ufffa\031\ufffa\001\002\000\012"
        + "\003\uffbe\013\uffbe\014\uffbe\024\uffbe\001\002\000\014\010"
        + "\ufff9\022\ufff9\023\ufff9\030\ufff9\031\ufff9\001\002\000\016"
        + "\003\uffba\013\uffba\014\uffba\024\uffba\044\127\045\131\001"
        + "\002\000\012\003\uffbd\013\uffbd\014\uffbd\024\uffbd\001\002"
        + "\000\012\003\uffbb\013\uffbb\014\uffbb\024\uffbb\001\002\000"
        + "\010\024\uffba\044\127\045\131\001\002\000\016\016\057"
        + "\017\056\024\uffb3\027\uffb3\044\uffb3\045\uffb3\001\002\000"
        + "\012\024\uffba\027\125\044\127\045\131\001\002\000\004"
        + "\024\141\001\002\000\024\003\uffb5\013\uffb5\014\uffb5\016"
        + "\uffb5\017\uffb5\024\uffb5\027\uffb5\044\uffb5\045\uffb5\001\002"
        + "\000\012\010\027\022\033\023\035\031\034\001\002\000"
        + "\012\024\uffb4\027\uffb4\044\uffb4\045\uffb4\001\002\000\004"
        + "\024\145\001\002\000\016\003\uffb2\013\uffb2\014\uffb2\024"
        + "\uffb2\044\uffb2\045\uffb2\001\002\000\004\031\147\001\002"
        + "\000\030\003\uffae\013\uffae\014\uffae\016\uffae\017\uffae\020"
        + "\uffae\021\uffae\024\uffae\027\uffae\044\uffae\045\uffae\001\002"
        + "\000\012\010\027\022\033\023\035\031\034\001\002\000"
        + "\024\003\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\024\uffb7"
        + "\027\uffb7\044\uffb7\045\uffb7\001\002\000\012\010\027\022"
        + "\033\023\035\031\034\001\002\000\020\003\uffb9\013\uffb9"
        + "\014\uffb9\024\uffb9\027\uffb9\044\uffb9\045\uffb9\001\002\000"
        + "\012\003\uffbf\013\uffbf\014\uffbf\024\uffbf\001\002\000\006"
        + "\013\167\014\166\001\002\000\010\003\155\013\161\014"
        + "\157\001\002\000\004\010\162\001\002\000\014\003\ufff1"
        + "\006\ufff1\007\ufff1\011\ufff1\012\ufff1\001\002\000\014\003"
        + "\uffea\006\uffea\007\uffea\011\uffea\012\uffea\001\002\000\012"
        + "\003\uffe8\013\uffe8\014\uffe8\015\163\001\002\000\014\010"
        + "\114\022\116\023\122\030\117\031\121\001\002\000\010"
        + "\003\uffe7\013\uffe7\014\uffe7\001\002\000\014\003\uffeb\006"
        + "\uffeb\007\uffeb\011\uffeb\012\uffeb\001\002\000\010\003\uffe6"
        + "\013\uffe6\014\uffe6\001\002\000\014\003\uffe9\006\uffe9\007"
        + "\uffe9\011\uffe9\012\uffe9\001\002\000\010\003\171\013\174"
        + "\014\173\001\002\000\006\013\201\014\200\001\002\000"
        + "\014\003\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\001\002"
        + "\000\004\010\175\001\002\000\014\003\uffd9\006\uffd9\007"
        + "\uffd9\011\uffd9\012\uffd9\001\002\000\012\003\uffd7\013\uffd7"
        + "\014\uffd7\015\176\001\002\000\012\010\072\022\077\023"
        + "\100\025\073\001\002\000\010\003\uffd6\013\uffd6\014\uffd6"
        + "\001\002\000\010\003\uffd5\013\uffd5\014\uffd5\001\002\000"
        + "\014\003\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\001\002"
        + "\000\014\003\uffda\006\uffda\007\uffda\011\uffda\012\uffda\001"
        + "\002\000\006\013\215\014\214\001\002\000\004\010\211"
        + "\001\002\000\014\003\ufff0\006\ufff0\007\ufff0\011\ufff0\012"
        + "\ufff0\001\002\000\014\003\uffe1\006\uffe1\007\uffe1\011\uffe1"
        + "\012\uffe1\001\002\000\010\003\203\013\206\014\204\001"
        + "\002\000\014\003\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2"
        + "\001\002\000\012\003\uffdf\013\uffdf\014\uffdf\015\212\001"
        + "\002\000\012\010\027\022\033\023\035\031\034\001\002"
        + "\000\010\003\uffde\013\uffde\014\uffde\001\002\000\010\003"
        + "\uffdd\013\uffdd\014\uffdd\001\002\000\014\003\uffe0\006\uffe0"
        + "\007\uffe0\011\uffe0\012\uffe0\001\002\000\010\007\015\011"
        + "\021\012\014\001\002\000\014\003\ufff4\006\ufff4\007\ufff4"
        + "\011\ufff4\012\ufff4\001\002\000\004\002\001\001\002\000"
        + "\010\002\ufff6\003\222\036\223\001\002\000\010\002\uffa4"
        + "\003\uffa4\036\uffa4\001\002\000\004\023\224\001\002\000"
        + "\004\010\225\001\002\000\004\024\226\001\002\000\004"
        + "\005\227\001\002\000\014\003\236\010\234\037\232\041"
        + "\233\042\230\001\002\000\004\023\305\001\002\000\020"
        + "\003\uffa2\006\uffa2\010\uffa2\034\uffa2\037\uffa2\041\uffa2\042"
        + "\uffa2\001\002\000\004\023\276\001\002\000\004\023\272"
        + "\001\002\000\004\015\267\001\002\000\020\003\uffa1\006"
        + "\uffa1\010\uffa1\034\uffa1\037\uffa1\041\uffa1\042\uffa1\001\002"
        + "\000\010\013\251\023\252\024\250\001\002\000\020\003"
        + "\uffa3\006\uffa3\010\uffa3\034\uffa3\037\uffa3\041\uffa3\042\uffa3"
        + "\001\002\000\016\003\244\006\243\010\234\037\232\041"
        + "\233\042\230\001\002\000\020\003\uffa0\006\uffa0\010\uffa0"
        + "\034\uffa0\037\uffa0\041\uffa0\042\uffa0\001\002\000\010\002"
        + "\uffa5\003\uffa5\036\uffa5\001\002\000\010\002\uff9d\003\uff9d"
        + "\036\uff9d\001\002\000\012\006\247\013\251\023\252\024"
        + "\250\001\002\000\016\003\244\006\243\010\234\037\232"
        + "\041\233\042\230\001\002\000\010\002\uff9c\003\uff9c\036"
        + "\uff9c\001\002\000\010\002\uff9b\003\uff9b\036\uff9b\001\002"
        + "\000\006\003\255\033\256\001\002\000\020\003\uff9e\006"
        + "\uff9e\010\uff9e\034\uff9e\037\uff9e\041\uff9e\042\uff9e\001\002"
        + "\000\012\010\027\022\033\023\035\031\034\001\002\000"
        + "\020\003\uff96\006\uff96\010\uff96\034\uff96\037\uff96\041\uff96"
        + "\042\uff96\001\002\000\020\003\uff98\006\uff98\010\uff98\034"
        + "\uff98\037\uff98\041\uff98\042\uff98\001\002\000\006\033\265"
        + "\034\266\001\002\000\016\003\236\010\234\034\uff8f\037"
        + "\232\041\233\042\230\001\002\000\004\034\264\001\002"
        + "\000\016\003\236\010\234\034\uff8d\037\232\041\233\042"
        + "\230\001\002\000\004\034\uff90\001\002\000\016\003\236"
        + "\010\234\034\uff8d\037\232\041\233\042\230\001\002\000"
        + "\004\034\uff8e\001\002\000\022\003\uff93\006\uff93\010\uff93"
        + "\034\uff93\037\uff93\040\uff93\041\uff93\042\uff93\001\002\000"
        + "\022\003\uff92\006\uff92\010\uff92\034\uff92\037\uff92\040\uff92"
        + "\041\uff92\042\uff92\001\002\000\022\003\uff91\006\uff91\010"
        + "\uff91\034\uff91\037\uff91\040\uff91\041\uff91\042\uff91\001\002"
        + "\000\014\010\114\022\116\023\122\030\117\031\121\001"
        + "\002\000\004\013\271\001\002\000\020\003\uff9f\006\uff9f"
        + "\010\uff9f\034\uff9f\037\uff9f\041\uff9f\042\uff9f\001\002\000"
        + "\014\010\114\022\116\023\122\030\117\031\121\001\002"
        + "\000\004\024\274\001\002\000\006\003\255\033\256\001"
        + "\002\000\020\003\uff99\006\uff99\010\uff99\034\uff99\037\uff99"
        + "\041\uff99\042\uff99\001\002\000\014\010\114\022\116\023"
        + "\122\030\117\031\121\001\002\000\004\024\300\001\002"
        + "\000\006\003\255\033\256\001\002\000\022\003\uff8b\006"
        + "\uff8b\010\uff8b\034\uff8b\037\uff8b\040\303\041\uff8b\042\uff8b"
        + "\001\002\000\020\003\uff9a\006\uff9a\010\uff9a\034\uff9a\037"
        + "\uff9a\041\uff9a\042\uff9a\001\002\000\006\003\255\033\256"
        + "\001\002\000\020\003\uff8c\006\uff8c\010\uff8c\034\uff8c\037"
        + "\uff8c\041\uff8c\042\uff8c\001\002\000\012\010\027\022\033"
        + "\023\035\031\034\001\002\000\004\014\307\001\002\000"
        + "\012\010\027\022\033\023\035\031\034\001\002\000\004"
        + "\014\311\001\002\000\012\010\072\022\077\023\100\025"
        + "\073\001\002\000\010\014\uff95\024\uff95\035\320\001\002"
        + "\000\004\014\314\001\002\000\012\010\072\022\077\023"
        + "\100\025\073\001\002\000\004\024\316\001\002\000\004"
        + "\013\317\001\002\000\020\003\uff97\006\uff97\010\uff97\034"
        + "\uff97\037\uff97\041\uff97\042\uff97\001\002\000\012\010\072"
        + "\022\077\023\100\025\073\001\002\000\006\014\uff94\024"
        + "\uff94\001\002\000\010\002\ufff6\003\222\036\223\001\002"
        + "\000\004\002\ufff8\001\002\000\004\002\ufff7\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\322\000\010\002\003\003\007\106\004\001\001\000"
        + "\004\025\220\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\014\004\021\010\017\075\011\077"
        + "\012\104\010\001\001\000\006\102\204\103\206\001\001"
        + "\000\006\073\171\074\167\001\001\000\006\100\157\101"
        + "\155\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\014\004\021\010\065\075\011\077\012\104"
        + "\010\001\001\000\002\001\001\000\002\001\001\000\014"
        + "\004\021\010\022\075\011\077\012\104\010\001\001\000"
        + "\002\001\001\000\004\006\025\001\001\000\010\066\031"
        + "\067\030\070\027\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\013\061\001\001\000\004\014\057\001\001"
        + "\000\002\001\001\000\002\001\001\000\010\020\037\035"
        + "\046\076\044\001\001\000\010\066\035\067\030\070\027"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\020\053\035\046\076\044\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\066\060\067\030\070\027\001\001\000"
        + "\002\001\001\000\006\067\064\070\027\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\007\067\001\001\000\002\001\001\000\010"
        + "\011\075\012\073\015\074\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\014\104\001\001\000\004\013\102"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\011"
        + "\100\012\073\015\074\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\012\103\015\074\001\001\000\002\001"
        + "\001\000\010\011\105\012\073\015\074\001\001\000\002"
        + "\001\001\000\004\005\107\001\001\000\002\001\001\000"
        + "\014\021\122\037\111\057\114\060\112\065\117\001\001"
        + "\000\006\071\153\105\123\001\001\000\004\014\151\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\013\147\001\001\000\010\020"
        + "\145\035\046\076\044\001\001\000\012\023\136\037\134"
        + "\060\135\065\117\001\001\000\010\061\127\071\125\105"
        + "\123\001\001\000\014\021\122\037\111\057\133\060\112"
        + "\065\117\001\001\000\010\066\131\067\030\070\027\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\071\132\105\123\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\071\143\105\123"
        + "\001\001\000\004\014\141\001\001\000\010\061\137\071"
        + "\125\105\123\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\066\142\067\030\070\027\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\067\150\070\027\001\001\000"
        + "\002\001\001\000\010\066\152\067\030\070\027\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\006\100\164\101\155\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\014\021"
        + "\122\037\111\057\163\060\112\065\117\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\006\073\201\074\167\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\011\176\012\073\015\074\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\102\207\103\206\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\066\212"
        + "\067\030\070\027\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\012\004\216\075\011\077\012"
        + "\104\010\001\001\000\002\001\001\000\002\001\001\000"
        + "\006\025\321\062\322\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\014\024\237\026\236\030\234\031\240\032\230"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\016\024\244\026"
        + "\236\027\241\030\234\031\240\032\230\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\016\024\244\026\236\027\245\030\234\031\240"
        + "\032\230\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\042\253\001\001\000\002\001\001\000\010\066\252"
        + "\067\030\070\027\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\016\024\257\026\236\030\234"
        + "\031\240\032\230\051\256\001\001\000\002\001\001\000"
        + "\016\024\261\026\236\030\234\031\240\032\230\072\260"
        + "\001\001\000\002\001\001\000\016\024\261\026\236\030"
        + "\234\031\240\032\230\072\262\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\021\122\037\111\057\267\060\112\065\117\001\001"
        + "\000\002\001\001\000\002\001\001\000\014\021\122\037"
        + "\111\057\272\060\112\065\117\001\001\000\002\001\001"
        + "\000\004\042\274\001\001\000\002\001\001\000\014\021"
        + "\122\037\111\057\276\060\112\065\117\001\001\000\002"
        + "\001\001\000\004\042\300\001\001\000\004\064\301\001"
        + "\001\000\002\001\001\000\004\042\303\001\001\000\002"
        + "\001\001\000\010\066\305\067\030\070\027\001\001\000"
        + "\002\001\001\000\010\066\307\067\030\070\027\001\001"
        + "\000\002\001\001\000\012\011\311\012\073\015\074\034"
        + "\312\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\011\311\012\073\015\074\034\314\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\011\320"
        + "\012\073\015\074\001\001\000\002\001\001\000\006\025"
        + "\321\062\323\001\001\000\002\001\001\000\002\001\001"
        + ""});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parserPnt$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parserPnt$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parserPnt$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public static ArrayList<tablaInt> tablaForInt;
    public static ArrayList<Errors> Semanticos, Sintacticos;
    public static boolean containsLleter, containsBool;

    public static int NumMethod, tipoOperacion;
    public static String Variables, condicion, cadenaPrev, MetodoS;

    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " + s.value + " Linea " + (s.left + 1) + " columna " + (s.right + 1));
        Sintacticos.add(new Errors(String.valueOf(s.value), "", -1, s.left, s.right));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) {
        Sintacticos.add(new Errors(String.valueOf(s.value), "", -1, s.left, s.right));
        System.out.println("La Cadena:" + s.value + " en la Linea:" + (s.right + 1) + " ,Columna: " + s.left + "esta fuera de contexto.");
    }

    public static Object[] getObj(Object[] obj1, Object[] obj2, int opc, int cases, int e2left, int e2right) {
        int type = (int) obj1[0] + (int) obj2[0];
        String x1 = (String) obj1[2];
        String x2 = (String) obj2[2];
        String bool = String.valueOf(obj2[3]);
        if (bool.equals("true")) {
            obj1[3] = true;
        } else if (bool.equals("??")) {
            obj1[3] = false;
        }
        bool = String.valueOf(obj1[3]);
        if (bool.equals("??")) {
            obj1[3] = false;
        }
        if (cases == 1) {

            if (type == 2) {
                int v1 = (int) obj1[1];
                int v2 = (int) obj2[1];

                switch (opc) {
                    case 1:
                        obj1[1] = v1 + v2;
                        obj1[2] = x1 + "+" + x2;

                        return obj1;
                    case 2:
                        obj1[1] = v1 - v2;
                        obj1[2] = x1 + "-" + x2;

                        return obj1;

                }
            } else {
                obj1[0] = 2;

                if (opc == 1) {

                    obj1[2] = x1 + "+" + x2;
                } else {

                    obj1[2] = x1 + "-" + x2;
                }
                return obj1;
            }
        } else {

            if (type == 2) {

                int v1 = (int) obj1[1];
                int v2 = (int) obj2[1];

                switch (opc) {
                    case 1:
                        obj1[1] = v1 * v2;
                        obj1[2] = x1 + "*" + x2;

                        return obj1;
                    case 2:
                        if (v2 == 0) {
                            v2 = -1;
                            Semanticos.add(new Errors(String.valueOf(v2), "No se puede dividir entre cero", -1, e2left, e2right));
                        }
                        obj1[1] = v1 / v2;
                        obj1[2] = x1 + "/" + x2;

                        return obj1;
                }
            } else {
                Semanticos.add(new Errors(String.valueOf(obj1[0]), "Error en Operadores para una cadena, solo se puede concatenar", -1, e2left, e2right));

                obj1[0] = 2;
                if (opc == 1) {

                    obj1[2] = x1 + "*" + x2;
                } else {

                    obj1[2] = x1 + "/" + x2;
                }
                return obj1;
            }
        }
        return null;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parserPnt$actions {

    private final parserPnt parser;

    /**
     * Constructor
     */
    CUP$parserPnt$actions(parserPnt parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parserPnt$do_action(
            int CUP$parserPnt$act_num,
            java_cup.runtime.lr_parser CUP$parserPnt$parser,
            java.util.Stack CUP$parserPnt$stack,
            int CUP$parserPnt$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parserPnt$result;

        /* select the action based on the action number */
        switch (CUP$parserPnt$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // C22 ::= 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C22", 50, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // C22 ::= Else V 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = "else" + (String) e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C22", 50, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // S22 ::= 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S22", 56, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // S22 ::= INSTRUC S22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = (String) e + (String) e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S22", 56, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // Datas ::= 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas", 39, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // Datas ::= INSTRUC S22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = (String) e + (String) e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas", 39, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // V ::= error cierraLlaves 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V", 32, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // V ::= error abreLlaves 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V", 32, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // V ::= abreLlaves Datas cierraLlaves 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                RESULT = "\n{\n" + e + "\n}\n";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V", 32, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // PARAM2 ::= E Punto E 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                int value = (int) ((double) e);
                int value2 = (int) ((double) e1);
                int vector[] = {value, value2};
                RESULT = vector;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2", 26, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // PARAM2 ::= E 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                int value = (int) ((double) e);
                int vector[] = {value, -9999};
                RESULT = vector;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2", 26, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // PAINT ::= error abreParen S1 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PAINT", 24, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // PAINT ::= pintar abreParen S1 coma S1 coma PARAM2 coma PARAM2 cierraParen puntoComa 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 8)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 8)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 8)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 6)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 6)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 6)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).value;
                int e3left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int e3right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e3 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;

                Object ob[] = (Object[]) e;
                Object ob2[] = (Object[]) e1;
                String str1 = String.valueOf(ob[3]);
                String str2 = String.valueOf(ob2[3]);
                String t1 = (String) ob[2];
                String t2 = (String) ob2[2];

                if (str1.equals("false")) {
                    Semanticos.add(new Errors(t1, "Error en el parametro 1, debe contener al menos una cadena", -1, eleft, eright));
                }

                if (str2.equals("false")) {
                    Semanticos.add(new Errors(t2, "Error en el parametro 2, debe contener al menos una cadena", -1, e1left, e1right));
                }
                String txt = "";
                int vector1[] = (int[]) e2;
                int vector2[] = (int[]) e3;
                txt = "\n pintar(" + t1 + "," + t2 + "," + vector1[0] + "," + vector1[1] + "," + vector2[0] + "," + vector2[1] + ");\n";

                /*if (Semanticos.size() == 1) {
                    if (Semanticos.get(0).getSolucion().equals("La variable no se encontro")) {
                        if (str1.equals("??")) {
                            txt = "\n pintar(\"" + t1 + "\"," + t2 + "," + vector1[0] + "," + vector1[1] + "," + vector2[0] + "," + vector2[1] + "," + e1left + "," + e1right + ");\n";
                            Semanticos = new ArrayList();
                        } else if (str2.equals("??")) {
                            txt = "\n pintar(" + t1 + ",\"" + t2 + "\"," + vector1[0] + "," + vector1[1] + "," + vector2[0] + "," + vector2[1] + "," + e2left + "," + e2right + ");\n";
                            Semanticos = new ArrayList();
                        }
                    }

                } else if (Semanticos.size() == 2) {
                    if (Semanticos.get(0).getSolucion().equals("La variable no se encontro")) {
                        if (!t1.contains("+")) {
                            Semanticos.remove(0);
                            if (Semanticos.get(0).getSolucion().equals("La variable no se encontro")) {
                                if (!t2.contains("+")) {
                                    Semanticos = new ArrayList();
                                    txt = "\n pintar(\"" + t1 + "\",\"" + t2 + "\"," + vector1[0] + "," + vector1[1] + "," + vector2[0] + "," + vector2[1] + "," + e2left + "," + e2right + ");\n";
                                }
                            }
                        }
                    }
                }*/
                RESULT = txt;
                containsLleter = false;
                containsBool = false;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PAINT", 24, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 10)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // SENTENCIAWHILE ::= error cierraParen V 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAWHILE", 23, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // SENTENCIAWHILE ::= While abreParen E22 cierraParen V 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String txt = "while(";
                try {
                    Condicion con = (Condicion) e;
                    txt += con.letter + ")";
                    RESULT = txt + (String) e1;
                } catch (Exception ex) {
                    Object ob[] = (Object[]) e;
                    Semanticos.add(new Errors((String) ob[2], "Error, una sentecia if debe contener operaciones logicas", -1, eleft, eright));
                    RESULT = "";
                }
                containsLleter = false;
                containsBool = false;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAWHILE", 23, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // SENTENCIAIF ::= If abreParen E22 cierraParen V C22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String txt = "if(";
                try {
                    Condicion con = (Condicion) e;
                    txt += con.letter + ")";

                    RESULT = txt + (String) e1 + (String) e2;
                } catch (Exception ex) {
                    Object ob[] = (Object[]) e;
                    Semanticos.add(new Errors((String) ob[2], "Error, una sentecia if debe contener operaciones logicas", -1, eleft, eright));
                    RESULT = "";
                }
                containsLleter = false;
                containsBool = false;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF", 22, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 5)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // ASIG ::= error cierraCor 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG", 21, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // ASIG ::= INSTRUC ASIG 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = (String) e + (String) e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG", 21, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // ASIG ::= cierraCor 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG", 21, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // ASIGNACION ::= error puntoComa 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 20, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // ASIGNACION ::= Id equals E22 puntoComa 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                String Id = String.valueOf(e);
                String bool = "";
                int typeS = -1;
                Object ob[] = null;
                Condicion con = null;
                try {
                    con = (Condicion) e1;
                    RESULT = (String) e + "=" + con.letter + ";";
                    typeS = con.getTipo();
                    if (con.letter.contains("true") || con.letter.contains("true")
                            || con.letter.contains("&&") || con.letter.contains("||")
                            || con.letter.contains(">") || con.letter.contains("<")
                            || con.letter.contains(">=") || con.letter.contains("<=")
                            || con.letter.contains("equals") || con.letter.contains("!=")
                            || con.letter.contains("==")) {
                        typeS = 33;
                    }

                } catch (Exception ex) {
                    ob = (Object[]) e1;
                    RESULT = (String) e + "=" + ob[2] + ";";
                    typeS = (int) ob[0];
                }

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (Id.equals(tablaForInt.get(i).getId())) {
                        int type = tablaForInt.get(i).type();
                        tablaForInt.get(i).setIsNull(false);
                        switch (type) {
                            case 1:
                                if (typeS != 1) {
                                    Semanticos.add(new Errors("=", "Despues de token =, tiene que asignarse a un valor entero", -1, e1left, e1right));
                                }
                                break;
                            case 2:
                                if (typeS != 2) {
                                    Semanticos.add(new Errors("=", "Despues de token =, debe contener al menos una cadena y no asignarse valores booleanos", -1, e1left, e1right));
                                }
                                break;
                            case 3:
                                break;
                        }

                        break;
                    }
                }

                containsLleter = false;
                containsBool = false;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 20, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // INSTRUC ::= SENTENCIAWHILE 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC", 18, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // INSTRUC ::= SENTENCIAIF 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC", 18, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // INSTRUC ::= PAINT 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC", 18, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // INSTRUC ::= ASIGNACION 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC", 18, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // INSTRUCCIONES ::= error 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES", 19, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // INSTRUCCIONES ::= Inst abreParen Id cierraParen abreCor INSTRUC ASIG 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 4)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String methoD = "private void instruct" + NumMethod + " (){\n";
                methoD += "String IdLienzo=\"" + (String) e + "\";\n";
                methoD += "this.LienzoGlobalParamX=IdLienzo;\n";
                methoD += "this.NumFFX="+eleft+";\n";
                methoD += "this.NumFFC="+eright+";\n";
                methoD += (String) e1 + (String) e2 + "\n}\n";
                RESULT = methoD;
                NumMethod++;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES", 19, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 6)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // S3 ::= COM CADENA COM 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                Object array[] = new Object[4];
                containsLleter = true;
                array[0] = 2;
                array[1] = -1;
                array[2] = "\"" + (String) e + "\"";
                array[3] = true;
                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3", 54, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // S3 ::= Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object array[] = new Object[4];
                array[0] = -1;
                array[1] = 0;
                array[2] = "";
                array[3] = false;
                boolean entro = false;
                String Id = String.valueOf(e);
                boolean exist = false;
                String msj = "La variable no se encontro";
                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (Id.equals(tablaForInt.get(i).getId())) {
                        entro = false;
                        int type = tablaForInt.get(i).type();
                        array[0] = type;
                        if (type == 2) {
                            containsLleter = true;
                            array[3] = true;
                        }
                        exist = true;
                        switch (type) {
                            case 1:
                                array[1] = tablaForInt.get(i).getValorInt();
                                break;
                            case 2:
                                break;
                            case 3:
                                array[3] = tablaForInt.get(i).getValorBoolean();
                                Semanticos.add(new Errors((String) e, "No se puede asignar una variable booleana", -1, eleft, eright));
                                containsBool = true;
                                break;
                        }

                        if (tablaForInt.get(i).isIsNull()) {
                            msj = "La variable no esta inicializada";
                            exist = false;
                        }
                        break;
                    }
                }
                array[2] = Id;

                if (!exist) {
                    array[3] = "??";
                    Semanticos.add(new Errors((String) e, msj, -1, eleft, eright));
                }
                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3", 54, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // S3 ::= abreParen S1 cierraParen 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                Object obj[] = (Object[]) e;
                String aux = (String) obj[2];
                obj[2] = "(" + aux + ")";
                RESULT = obj;
                ;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3", 54, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // S3 ::= Num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object array[] = new Object[4];
                array[0] = 1;
                array[1] = Integer.parseInt(String.valueOf(e));
                array[2] = String.valueOf(e);
                array[3] = false;

                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3", 54, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // S2 ::= S3 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2", 53, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // S2 ::= S3 OP2 S2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = getObj((Object[]) e, (Object[]) e2, (int) e1, 2, e2left, e2right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2", 53, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // S1 ::= S2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1", 52, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // S1 ::= S2 OP1 S1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = getObj((Object[]) e, (Object[]) e2, (int) e1, 1, e2left, e2right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1", 52, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // DATA22 ::= COM CADENA COM 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                containsLleter = true;
                Object array[] = new Object[4];
                array[0] = 2;
                array[1] = -1;
                array[2] = "\"" + (String) e + "\"";
                array[3] = false;
                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22", 51, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // DATA22 ::= Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object array[] = new Object[4];
                array[0] = -1;
                array[1] = 0;
                array[2] = "";
                array[3] = false;

                String Id = String.valueOf(e);
                boolean exist = false;
                String msj = "La variable no se encontro";
                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (Id.equals(tablaForInt.get(i).getId())) {
                        int type = tablaForInt.get(i).type();
                        array[0] = type;

                        exist = true;
                        switch (type) {
                            case 1:
                                array[1] = tablaForInt.get(i).getValorInt();
                                break;
                            case 2:
                                containsLleter = true;
                                break;
                            case 3:
                                array[3] = tablaForInt.get(i).getValorBoolean();
                                containsBool = true;
                                break;
                        }
                        array[2] = Id;
                        if (tablaForInt.get(i).isIsNull()) {
                            msj = "La variable no esta inicializada";
                            exist = false;
                        }
                        break;
                    }
                }

                if (!exist) {
                    Semanticos.add(new Errors((String) e, msj, -1, eleft, eright));
                    array[3] = true;
                }
                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22", 51, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // DATA22 ::= Num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object array[] = new Object[4];
                array[0] = 1;
                array[1] = Integer.parseInt(String.valueOf(e));
                array[2] = String.valueOf(e);
                array[3] = false;

                RESULT = array;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22", 51, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // C ::= Bool 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = Boolean.parseBoolean((String) e);
                containsBool = true;
                ;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C", 29, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // C ::= abreParen C S11 cierraParen 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                try {
                    extraClass next = (extraClass) e1;
                    Condicion cond = new Condicion((boolean) e, next);
                    cond.setLetter("(" + cond.letter + ")");
                    RESULT = cond;
                } catch (Exception ex) {
                    Condicion cond = new Condicion((Condicion) e, (extraClass) e1);
                    cond.setLetter("(" + cond.letter + ")");
                    RESULT = cond;
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C", 29, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // COND1 ::= V22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1", 17, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // COND1 ::= V22 OP1 S1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = getObj((Object[]) e, (Object[]) e2, (int) e1, 1, e2left, e2right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1", 17, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // V22 ::= abreParen COND1 X22 cierraParen 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;

                if (e1 != null) {
                    try {
                        extraClass next = (extraClass) e1;
                        Condicion cond = new Condicion(e, next,e1left,e1right);
                        String letter = cond.letter;
                        cond.setLetter("(" + letter + ")");
                        RESULT = cond;
                    } catch (Exception ex) {
                        Condicion cond = new Condicion((Condicion) e, (extraClass) e1);
                        cond.setLetter("(" + cond.letter + ")");
                        RESULT = cond;
                    }
                } else {
                    try {
                        Object obj[] = (Object[]) e;
                        obj[2] = "(" + obj[2] + ")";
                        RESULT = e;
                    } catch (Exception ex) {
                        Condicion cnd = (Condicion) e;
                        cnd.setLetter("(" + cnd.letter + ")");
                        RESULT = cnd;
                    }
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22", 46, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // V22 ::= DATA22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22", 46, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // V22 ::= DATA22 OP2 S2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = getObj((Object[]) e, (Object[]) e2, (int) e1, 2, e2left, e2right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22", 46, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // CONDICION ::= V22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION", 15, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // CONDICION ::= V22 OP1 S1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = getObj((Object[]) e, (Object[]) e2, (int) e1, 1, e2left, e2right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION", 15, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // S11 ::= 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11", 55, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // S11 ::= OperadorLogico E22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = new extraClass((String) e, (Condicion) e1,e1left,e1right);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11", 55, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // X22 ::= S11 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = e;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22", 47, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // X22 ::= Operador S1 S11 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object obj[] = (Object[]) e1;
                String op = (String) e;
                int typo = (int) obj[0];
                RESULT = new extraClass(op, typo, String.valueOf(obj[2]), (extraClass) e2);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22", 47, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // E22 ::= CONDICION X22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                try {
                    extraClass next = (extraClass) e1;
                    Condicion cond = new Condicion(e, next,e1left,e1right);
                    RESULT = cond;
                } catch (Exception ex) {
                    try {
                        Condicion cond = new Condicion((Condicion) e, (extraClass) e1);
                        RESULT = cond;
                    } catch (Exception ss) {
                        RESULT = e;
                    }
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22", 45, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // E22 ::= C S11 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                try {
                    extraClass next = (extraClass) e1;
                    Condicion cond = new Condicion((boolean) e, next);
                    RESULT = cond;
                } catch (Exception ex) {
                    Condicion c = (Condicion) e;
                    Condicion cond = new Condicion(c, (extraClass) e1);
                    RESULT = cond;
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22", 45, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // STRING ::= SYMBOLS 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING", 60, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // STRING ::= Num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING", 60, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // STRING ::= Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING", 60, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // STRING ::= Cadena 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING", 60, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // CADENA ::= 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA", 14, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // CADENA ::= STRING CADENA 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = e + "" + e1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA", 14, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // OP1 ::= Res 
            {
                Object RESULT = null;

                RESULT = 2;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1", 10, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // OP1 ::= Sum 
            {
                Object RESULT = null;
                RESULT = 1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1", 10, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // OP2 ::= Div 
            {
                Object RESULT = null;
                RESULT = 2;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2", 9, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // OP2 ::= Mul 
            {
                Object RESULT = null;
                RESULT = 1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2", 9, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // F ::= Double 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = Double.parseDouble((String) e);
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F", 11, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // F ::= Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String msj = "El identificador no existe";
                boolean valid = true;
                int valor = 1;
                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        try {
                            valor = tablaForInt.get(i).getValorInt();
                            RESULT = Double.parseDouble(String.valueOf(valor));
                            valid = false;
                            if (tablaForInt.get(i).isIsNull()) {
                                msj = "La variable no esta inicializada";
                                valid = true;
                            }
                        } catch (Exception exs) {
                            msj = "La variable no es de tipo entero";
                            valid = true;
                        }

                        break;

                    }
                }
                if (valid) {
                    RESULT = -1.5;
                    parserPnt.Semanticos.add(new Errors((String) e, msj, -1, eleft, eright));
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F", 11, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // F ::= abreParen E cierraParen 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F", 11, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // F ::= Num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = Double.parseDouble((String) e);
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F", 11, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // T ::= F 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T", 8, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // T ::= F OP2 T 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                try {
                    int opc = (int) e1;
                    double x1 = (double) e;
                    double x2 = (double) e2;

                    if (opc == 1) {
                        RESULT = (x1 * x2);
                    } else {
                        RESULT = (x1 / x2);
                    }
                } catch (Exception ex) {
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T", 8, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // E ::= T 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E", 7, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // E ::= T OP1 E 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                try {
                    int opc = (int) e1;
                    double x1 = (double) e;
                    double x2 = (double) e2;

                    if (opc == 1) {
                        RESULT = (x1 + x2);
                    } else {
                        RESULT = (x1 - x2);
                    }
                } catch (Exception ex) {
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E", 7, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // K ::= error K 
            {
                Object RESULT = null;
                System.out.println("ERROR K");
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K", 6, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // K ::= VALUES K 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = (String) e + (String) e1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K", 6, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // K ::= cierraCor 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K", 6, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // OPCIONINT2 ::= error coma 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2", 58, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // OPCIONINT2 ::= coma Id equals E 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }
                int value = (int) ((double) e1);

                tablaForInt.add(new tablaInt(value, (String) e, false, "int"));

                RESULT = "," + (String) e + " = " + String.valueOf(value);

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2", 58, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // OPCIONINT2 ::= coma Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }

                tablaForInt.add(new tablaInt(-1, (String) e, true, "int"));
                RESULT = "," + (String) e;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2", 58, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // OPCIONINT1 ::= error puntoComa 
            {
                Object RESULT = null;
                System.out.println("ERROR PUNTO COMA");
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1", 57, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // OPCIONINT1 ::= puntoComa 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1", 57, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // OPCIONINT1 ::= OPCIONINT2 OPCIONINT1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                RESULT = (String) e + (String) e1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1", 57, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // OPCINT ::= 
            {
                Object RESULT = null;
                RESULT = -1.5;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT", 5, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // OPCINT ::= equals E 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT", 5, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // OPCIONSTRING2 ::= error coma 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2", 65, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // OPCIONSTRING2 ::= coma Id equals S1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }
                Object obj[] = (Object[]) e1;
                if (!containsLleter) {
                    Semanticos.add(new Errors((String) obj[2], "Despues de =, debe contener al menos el valor de una cadena", -1, eleft, eright));
                }
                containsLleter = false;
//String value=String.valueOf(e1);
                tablaForInt.add(new tablaInt("", (String) e, false, "str"));
                RESULT = "," + e + "=" + obj[2];

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2", 65, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // OPCIONSTRING2 ::= coma Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }

                tablaForInt.add(new tablaInt("", (String) e, true, "str"));
                RESULT = "," + e;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2", 65, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // OPCIONSTRING ::= error puntoComa 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING", 64, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // OPCIONSTRING ::= puntoComa 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING", 64, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // OPCIONSTRING ::= OPCIONSTRING2 OPCIONSTRING 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = "" + e + "" + e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING", 64, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // OPCSTR ::= 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR", 4, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // OPCSTR ::= equals S1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                Object obj[] = (Object[]) e;
                if (!containsLleter) {
                    Semanticos.add(new Errors((String) obj[2], "Despues de =, debe contener al menos el valor de una cadena", -1, eleft, eright));
                }
                containsLleter = false;
                RESULT = "=" + obj[2];

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR", 4, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // STRINGX ::= String Id OPCSTR 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }

                boolean isNull = false;
                if (e1 == null) {
                    isNull = true;
                    RESULT = (String) e;
                } else {
                    RESULT = (String) e + (String) e1;
                }
                tablaForInt.add(new tablaInt("", (String) e, isNull, "str"));

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRINGX", 66, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // OPCIONBOOL2 ::= error coma 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2", 63, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // OPCIONBOOL2 ::= coma Id equals E22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String msj = "";
                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }
                boolean value = true;
                tablaForInt.add(new tablaInt(value, (String) e, false, "bool"));
                try {
                    Condicion tmp = (Condicion) e1;
                    msj = tmp.letter;
                } catch (Exception ex) {
                    Object obj[] = (Object[]) e1;
                    msj = (String) obj[2];
                }

                RESULT = "," + (String) e + "=" + msj;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2", 63, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 3)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // OPCIONBOOL2 ::= coma Id 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }

                tablaForInt.add(new tablaInt(false, (String) e, true, "bool"));
                RESULT = "," + (String) e;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2", 63, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // OPCIONBOOL ::= error puntoComa 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL", 62, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // OPCIONBOOL ::= puntoComa 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL", 62, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // OPCIONBOOL ::= OPCIONBOOL2 OPCIONBOOL 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                if (e1 != null) {
                    RESULT = (String) e + (String) e1;
                } else {
                    RESULT = (String) e;
                }

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL", 62, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // OPCBOOL ::= 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL", 3, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // OPCBOOL ::= equals E22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                String retorno = "";
                try {
                    Condicion tmp = (Condicion) e;
                    int tipo = tmp.getTipo();
                    retorno = "=" + tmp.letter;
                    if (tipo != 3) {
                        if (tmp.letter.contains("&&") || tmp.letter.contains("||")
                                || tmp.letter.contains(">") || tmp.letter.contains("<") || tmp.letter.contains("equals")
                                || tmp.letter.contains("<=") || tmp.letter.contains(">=") || tmp.letter.contains("==")
                                || tmp.letter.contains("!=")) {

                        } else {
                            Semanticos.add(new Errors(tmp.letter, "Se debe asignar un valor logico (booleano)", -1, eleft, eright));
                        }
                    }
                } catch (Exception ex) {
                    Object obj[] = (Object[]) e;
                    int tipo = (int) obj[0];
                    if (tipo != 3) {
                        Semanticos.add(new Errors((String) obj[2], "Se debe asignar un valor logico (booleano)", -1, eleft, eright));
                    }
                    retorno = "=" + obj[2];
                }

                RESULT = retorno;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL", 3, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // BOOLEAN ::= Boolean Id OPCBOOL 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }
                boolean value = true;
                boolean isNull = false;
                if (e1 == null) {
                    isNull = true;
                    RESULT = (String) e;
                }
                tablaForInt.add(new tablaInt(value, (String) e, isNull, "bool"));
                RESULT = (String) e + (String) e1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("BOOLEAN", 61, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // INT ::= Int Id OPCINT 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                for (int i = 0; i < tablaForInt.size(); i++) {
                    if (((String) e).equals(tablaForInt.get(i).getId())) {
                        Semanticos.add(new Errors((String) e, "El identificador existe", -1, eleft, eright));
                        break;
                    }
                }
                int value = (int) ((double) e1);
                boolean isNull = false;
                if ((double) e1 == -1.5) {
                    isNull = true;
                    RESULT = (String) e;
                } else {
                    RESULT = (String) e + "=" + String.valueOf(value);
                }
                tablaForInt.add(new tablaInt(value, (String) e, isNull, "int"));

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INT", 59, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // VALUES ::= STRINGX OPCIONSTRING 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = "String " + e + " " + e1 + ";\n";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES", 2, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // VALUES ::= BOOLEAN OPCIONBOOL 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = "boolean " + e + " " + e1 + ";\n";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES", 2, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // VALUES ::= INT OPCIONINT1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = "int " + e + " " + e1 + ";\n";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES", 2, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // VARIABLES ::= error 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VARIABLES", 1, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // VARIABLES ::= Vars abreCor VALUES 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = e;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VARIABLES", 1, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // A ::= VARIABLES K 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                containsBool = false;
                containsLleter = false;
                String txt = String.valueOf(e) + " " + String.valueOf(e1);
                Variables = txt.replace("null", "");

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("A", 0, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // T22 ::= 
            {
                Object RESULT = null;
                RESULT = "";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T22", 48, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // T22 ::= INSTRUCCIONES T22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
                RESULT = (String) e + (String) e1;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T22", 48, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // AS ::= A INSTRUCCIONES T22 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

                MetodoS = (String) e + "" + (String) e1;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("AS", 68, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 2)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // OperadorLogico ::= Or 
            {
                Object RESULT = null;
                RESULT = "||";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OperadorLogico", 67, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // OperadorLogico ::= And 
            {
                Object RESULT = null;
                RESULT = "&&";
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OperadorLogico", 67, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // SYMBOLS ::= cierraParen 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // SYMBOLS ::= abreParen 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // SYMBOLS ::= Div 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // SYMBOLS ::= Mul 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // SYMBOLS ::= Res 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // SYMBOLS ::= Sum 
            {
                Object RESULT = null;

                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS", 27, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            return CUP$parserPnt$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= AS EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)).value;
                RESULT = start_val;
                CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top - 1)), ((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parserPnt$parser.done_parsing();
            return CUP$parserPnt$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
