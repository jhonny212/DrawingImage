
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 13 21:20:09 CST 2020
//----------------------------------------------------

package AnalizadorPnt;

import static AnalizadorPnt.parserPnt.Semanticos;
import static AnalizadorPnt.parserPnt.cadenaValue;
import static AnalizadorPnt.parserPnt.getObj;
import static AnalizadorPnt.parserPnt.tablaForInt;

import static AnalizadorPnt.parserPnt.tipoVar;
import TablaDeSimbolos.tablaInt;

import drawgif.Errors;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 13 21:20:09 CST 2020
  */
public class parserPnt extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserPnt() {super();}

  /** Constructor which sets the default scanner. */
  public parserPnt(java_cup.runtime.Scanner s) {super(s);
  tablaForInt=new ArrayList<>();
  Semanticos = new ArrayList<>();
  }

  /** Constructor which sets the default scanner. */
  public parserPnt(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\002\004\000\002\003\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\075\005\000\002\077\005\000\002\005\004\000\002\005" +
    "\002\000\002\100\004\000\002\100\003\000\002\101\004" +
    "\000\002\101\006\000\002\104\005\000\002\006\004\000" +
    "\002\006\002\000\002\102\004\000\002\102\003\000\002" +
    "\103\004\000\002\103\006\000\002\007\004\000\002\007" +
    "\002\000\002\073\004\000\002\073\003\000\002\074\004" +
    "\000\002\074\006\000\002\010\003\000\002\010\004\000" +
    "\002\011\005\000\002\011\003\000\002\012\005\000\002" +
    "\012\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\020\004\000" +
    "\002\020\002\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\025\010\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\026\006\000\002\027\003\000\002\027\003\000" +
    "\002\057\004\000\002\057\004\000\002\021\005\000\002" +
    "\021\003\000\002\060\005\000\002\060\003\000\002\060" +
    "\006\000\002\061\005\000\002\061\003\000\002\023\005" +
    "\000\002\023\003\000\002\022\004\000\002\022\002\000" +
    "\002\037\006\000\002\037\003\000\002\071\004\000\002" +
    "\071\002\000\002\065\003\000\002\065\003\000\002\065" +
    "\005\000\002\066\005\000\002\066\003\000\002\067\005" +
    "\000\002\067\003\000\002\070\003\000\002\070\005\000" +
    "\002\070\003\000\002\070\005\000\002\030\011\000\002" +
    "\031\007\000\002\032\015\000\002\034\003\000\002\034" +
    "\005\000\002\042\004\000\002\042\004\000\002\051\003" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\052\006\000\002\053\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\004\005\001\002\000\004\002\201\001" +
    "\002\000\004\005\177\001\002\000\012\006\014\007\013" +
    "\011\016\012\012\001\002\000\006\013\171\014\167\001" +
    "\002\000\006\013\162\014\161\001\002\000\006\013\152" +
    "\014\151\001\002\000\004\010\103\001\002\000\004\010" +
    "\063\001\002\000\004\002\uffe0\001\002\000\004\002\ufffa" +
    "\001\002\000\004\010\021\001\002\000\012\006\014\007" +
    "\013\011\016\012\012\001\002\000\004\002\uffdf\001\002" +
    "\000\010\013\uffeb\014\uffeb\015\022\001\002\000\012\010" +
    "\024\022\030\023\032\032\031\001\002\000\006\013\uffed" +
    "\014\uffed\001\002\000\024\013\uffaa\014\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\024\uffaa\027\uffaa\030\uffaa\001\002" +
    "\000\024\013\uffad\014\uffad\016\uffad\017\uffad\020\060\021" +
    "\061\024\uffad\027\uffad\030\uffad\001\002\000\020\013\uffaf" +
    "\014\uffaf\016\054\017\053\024\uffaf\027\uffaf\030\uffaf\001" +
    "\002\000\006\013\uffec\014\uffec\001\002\000\024\013\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\024\uffac\027" +
    "\uffac\030\uffac\001\002\000\026\010\037\016\045\017\047" +
    "\020\041\021\036\022\044\023\050\024\046\026\040\032" +
    "\uffd1\001\002\000\012\010\024\022\030\023\032\032\031" +
    "\001\002\000\004\024\034\001\002\000\024\013\uffab\014" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\024\uffab\027\uffab" +
    "\030\uffab\001\002\000\004\032\052\001\002\000\026\010" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\026\ufffd\032\ufffd\001\002\000\026\010\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\032\uffcf\001\002\000\026\010\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0" +
    "\032\uffd0\001\002\000\026\010\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\032\ufffe" +
    "\001\002\000\026\010\037\016\045\017\047\020\041\021" +
    "\036\022\044\023\050\024\046\026\040\032\uffd1\001\002" +
    "\000\026\010\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\032\uffcd\001\002\000\026" +
    "\010\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\026\uffce\032\uffce\001\002\000\026\010\000" +
    "\016\000\017\000\020\000\021\000\022\000\023\000\024" +
    "\000\026\000\032\000\001\002\000\026\010\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026" +
    "\ufffb\032\ufffb\001\002\000\026\010\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff\032" +
    "\uffff\001\002\000\026\010\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\032\ufffc\001" +
    "\002\000\004\032\uffd2\001\002\000\024\013\uffa9\014\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\024\uffa9\027\uffa9\030" +
    "\uffa9\001\002\000\014\010\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\032\uffd3\001\002\000\014\010\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\032\uffd4\001\002\000\012\010\024\022\030\023\032" +
    "\032\031\001\002\000\014\013\uffb0\014\uffb0\024\uffb0\027" +
    "\uffb0\030\uffb0\001\002\000\012\010\024\022\030\023\032" +
    "\032\031\001\002\000\014\010\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\032\uffd6\001\002\000\014\010\uffd5\022\uffd5\023\uffd5" +
    "\025\uffd5\032\uffd5\001\002\000\020\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\024\uffae\027\uffae\030\uffae\001\002\000\010" +
    "\013\uffe5\014\uffe5\015\065\001\002\000\006\013\ufff5\014" +
    "\ufff5\001\002\000\012\010\066\022\073\023\074\025\067" +
    "\001\002\000\020\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\024\uffd8\001\002\000\020\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\001\002\000" +
    "\014\013\uffdd\014\uffdd\016\054\017\053\024\uffdd\001\002" +
    "\000\020\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\060\021" +
    "\061\024\uffdb\001\002\000\006\013\uffe6\014\uffe6\001\002" +
    "\000\020\013\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\024\uffda\001\002\000\012\010\066\022\073\023\074" +
    "\025\067\001\002\000\004\024\076\001\002\000\020\013" +
    "\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9" +
    "\001\002\000\012\010\066\022\073\023\074\025\067\001" +
    "\002\000\014\013\uffdc\014\uffdc\016\uffdc\017\uffdc\024\uffdc" +
    "\001\002\000\012\010\066\022\073\023\074\025\067\001" +
    "\002\000\010\013\uffde\014\uffde\024\uffde\001\002\000\010" +
    "\013\ufff2\014\ufff2\015\105\001\002\000\006\013\ufff4\014" +
    "\ufff4\001\002\000\014\010\110\022\112\023\116\031\113" +
    "\032\115\001\002\000\012\013\uffb4\014\uffb4\024\uffb4\030" +
    "\120\001\002\000\020\013\uffc1\014\uffc1\016\054\017\053" +
    "\024\uffc1\027\uffc1\030\uffc1\001\002\000\024\013\uffb2\014" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2\027\uffb2" +
    "\030\uffb2\001\002\000\006\013\ufff3\014\ufff3\001\002\000" +
    "\024\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\024\uffb3\027\uffb3\030\uffb3\001\002\000\012\013\uffb6\014" +
    "\uffb6\024\uffb6\030\uffb6\001\002\000\024\013\uffbf\014\uffbf" +
    "\016\uffbf\017\uffbf\020\060\021\061\024\uffbf\027\uffbf\030" +
    "\uffbf\001\002\000\026\010\037\016\045\017\047\020\041" +
    "\021\036\022\044\023\050\024\046\026\040\032\uffd1\001" +
    "\002\000\014\010\110\022\112\023\116\031\113\032\115" +
    "\001\002\000\014\013\uffb4\014\uffb4\024\uffb4\027\121\030" +
    "\120\001\002\000\014\010\110\022\112\023\116\031\113" +
    "\032\115\001\002\000\012\010\024\022\030\023\032\032" +
    "\031\001\002\000\010\013\uffbc\014\uffbc\024\uffbc\001\002" +
    "\000\010\013\uffc3\014\uffc3\024\uffc3\001\002\000\012\013" +
    "\uffb4\014\uffb4\024\uffb4\030\120\001\002\000\010\013\uffbd" +
    "\014\uffbd\024\uffbd\001\002\000\010\013\uffb5\014\uffb5\024" +
    "\uffb5\001\002\000\006\024\uffb4\030\120\001\002\000\014" +
    "\016\054\017\053\024\uffba\027\uffba\030\uffba\001\002\000" +
    "\010\024\uffb4\027\121\030\120\001\002\000\004\024\133" +
    "\001\002\000\020\013\uffbe\014\uffbe\016\uffbe\017\uffbe\024" +
    "\uffbe\027\uffbe\030\uffbe\001\002\000\012\010\024\022\030" +
    "\023\032\032\031\001\002\000\010\024\uffbb\027\uffbb\030" +
    "\uffbb\001\002\000\004\024\137\001\002\000\012\013\uffb7" +
    "\014\uffb7\024\uffb7\030\uffb7\001\002\000\004\032\141\001" +
    "\002\000\024\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\024\uffb1\027\uffb1\030\uffb1\001\002\000\012\010" +
    "\024\022\030\023\032\032\031\001\002\000\020\013\uffc0" +
    "\014\uffc0\016\uffc0\017\uffc0\024\uffc0\027\uffc0\030\uffc0\001" +
    "\002\000\012\010\024\022\030\023\032\032\031\001\002" +
    "\000\014\013\uffc2\014\uffc2\024\uffc2\027\uffc2\030\uffc2\001" +
    "\002\000\010\013\uffc4\014\uffc4\024\uffc4\001\002\000\006" +
    "\013\152\014\151\001\002\000\012\006\ufff7\007\ufff7\011" +
    "\ufff7\012\ufff7\001\002\000\004\010\153\001\002\000\012" +
    "\006\ufff0\007\ufff0\011\ufff0\012\ufff0\001\002\000\010\013" +
    "\uffef\014\uffef\015\154\001\002\000\014\010\110\022\112" +
    "\023\116\031\113\032\115\001\002\000\006\013\uffee\014" +
    "\uffee\001\002\000\012\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\001\002\000\006\013\162\014\161\001\002\000\012\006" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\001\002\000\004\010\163" +
    "\001\002\000\012\006\uffe3\007\uffe3\011\uffe3\012\uffe3\001" +
    "\002\000\010\013\uffe2\014\uffe2\015\164\001\002\000\012" +
    "\010\066\022\073\023\074\025\067\001\002\000\006\013" +
    "\uffe1\014\uffe1\001\002\000\012\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\001\002\000\004\010\174\001\002\000\012\006" +
    "\ufff6\007\ufff6\011\ufff6\012\ufff6\001\002\000\012\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\001\002\000\006\013\171\014" +
    "\167\001\002\000\012\006\uffea\007\uffea\011\uffea\012\uffea" +
    "\001\002\000\010\013\uffe8\014\uffe8\015\175\001\002\000" +
    "\012\010\024\022\030\023\032\032\031\001\002\000\006" +
    "\013\uffe7\014\uffe7\001\002\000\010\007\013\011\016\012" +
    "\012\001\002\000\012\006\ufff9\007\ufff9\011\ufff9\012\ufff9" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\016\010\014\075\007" +
    "\077\010\104\006\001\001\000\006\102\167\103\171\001" +
    "\001\000\006\073\157\074\156\001\001\000\006\100\147" +
    "\101\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\016\010\017\075\007\077\010\104\006\001\001\000" +
    "\002\001\001\000\004\006\022\001\001\000\010\066\026" +
    "\067\025\070\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\056\001\001\000\004\014\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\034\035" +
    "\042\076\041\001\001\000\010\066\032\067\025\070\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\050\035\042\076\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\066\055\067\025\070\024\001\001\000" +
    "\002\001\001\000\006\067\061\070\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\063\001\001\000\002\001\001\000\010\011\071\012\067" +
    "\015\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\100\001\001\000\004\013\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\074\012\067\015" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\077\015\070\001\001\000\002\001\001\000\010\011" +
    "\101\012\067\015\070\001\001\000\002\001\001\000\004" +
    "\005\103\001\001\000\002\001\001\000\014\021\116\037" +
    "\105\057\110\060\106\065\113\001\001\000\004\071\145" +
    "\001\001\000\004\014\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\141\001\001\000\010\020\137\035\042\076\041\001" +
    "\001\000\012\023\130\037\126\060\127\065\113\001\001" +
    "\000\006\061\122\071\121\001\001\000\014\021\116\037" +
    "\105\057\125\060\106\065\113\001\001\000\010\066\123" +
    "\067\025\070\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\135\001\001\000\004\014\133\001" +
    "\001\000\006\061\131\071\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\066\134\067\025\070\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\142\070" +
    "\024\001\001\000\002\001\001\000\010\066\144\067\025" +
    "\070\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\100\155\101\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\116\037\105\057\154\060\106\065\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\165\074\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\164\012\067\015\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\102\172\103" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\175\067\025\070\024\001\001\000\002\001\001\000" +
    "\012\004\177\075\007\077\010\104\006\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserPnt$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserPnt$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserPnt$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<tablaInt> tablaForInt;
    public static ArrayList<Errors> Semanticos;

        
public static int tipoVar,tipoOperacion;
public static String cadenaValue,condicion,cadenaPrev;

   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

 public static Object[] getObj(Object [] obj1,Object [] obj2,int opc, int cases, int e2left, int e2right){
/*Object obj1[]=(Object[])e;
Object obj2[]=(Object[])e2;*/
int type=(int)obj1[0]+(int)obj2[0];
String x1=(String)obj1[2];
String x2=(String)obj2[2];
     if(cases==1){

if(type==2){
int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1+v2;
    obj1[2]=x1+"+"+x2;
    cadenaValue+=obj1[2]+"+"+obj2[2]+" ";
    return obj1;
    case 2:
    obj1[1]=v1-v2;
    obj1[2]=x1+"-"+x2;
    cadenaValue+=obj1[2]+"-"+obj2[2]+" ";
    return obj1;
   
}
}else{
obj1[0]=-55;    
    
if(opc==1){
  cadenaValue+=obj1[2]+"+"+obj2[2]+" ";
    obj1[2]=x1+"+"+x2;
}else{
  cadenaValue+=obj1[2]+"-"+obj2[2]+" ";
  obj1[2]=x1+"-"+x2;
}
return obj1;
}     
     }else{

if(type==2){

int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1*v2;
    obj1[2]=x1+"*"+x2;
    cadenaValue+=obj1[2]+"/"+obj2[2]+" ";
    
    return obj1;
    case 2:
    if(v2==0){
        v2=-1;
        Semanticos.add(new Errors(String.valueOf(v2),"No se puede dividir entre cero",-1,e2left,e2right));
    }
    obj1[1]=v1/v2;
    obj1[2]=x1+"-"+x2;
    cadenaValue+=obj1[2]+"/"+obj2[2]+" ";
    return obj1;
   
}
}else{
obj1[0]=-55;    
if(opc==1){
  cadenaValue+=obj1[2]+"+"+obj2[2]+" ";
    obj1[2]=x1+"+"+x2;
}else{
  cadenaValue+=obj1[2]+"-"+obj2[2]+" ";
  obj1[2]=x1+"-"+x2;
}
return obj1;
}
     }
 return null;
 }

 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserPnt$actions {
  private final parserPnt parser;

  /** Constructor */
  CUP$parserPnt$actions(parserPnt parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserPnt$do_action(
    int                        CUP$parserPnt$act_num,
    java_cup.runtime.lr_parser CUP$parserPnt$parser,
    java.util.Stack            CUP$parserPnt$stack,
    int                        CUP$parserPnt$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserPnt$result;

      /* select the action based on the action number */
      switch (CUP$parserPnt$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIG2 ::= Datas 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG2",41, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIG2 ::= cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG2",41, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION2 ::= Id equals E22 ASIG2 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION2",40, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Datas ::= SENTENCIAWHILE ASIG2 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Datas ::= SENTENCIAIF ASIG2 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Datas ::= PAINT ASIG2 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Datas ::= ASIGNACION2 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // V ::= abreLlaves cierraLlaves 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V",32, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // V ::= abreLlaves Datas 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V",32, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAM2 ::= E Punto E 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2",26, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAM2 ::= E 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2",26, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PAINT ::= pintar abreParen E22 coma E22 coma PARAM2 coma PARAM2 cierraParen puntoComa 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PAINT",24, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-10)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIAWHILE ::= While abreParen E22 cierraParen V 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAWHILE",23, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIAIF ::= If abreParen E22 cierraParen V Else V 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF",22, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-6)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // S3 ::= COM CADENA COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]=(String)e;
array[3]=false;
cadenaValue+=e+" ";
           
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // S3 ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            array[2]=tablaForInt.get(i).getValue();
            cadenaValue+=tablaForInt.get(i).getValue()+" ";
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            Semanticos.add(new Errors((String)e,"No se puede asignar una variable booleana",-1,eleft,eright));
            break;
        }
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}

if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // S3 ::= abreParen S1 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
Object obj[]=(Object[])e;
String aux=(String)obj[2];
obj[2]="("+aux+")";
cadenaValue+="("+e+") ";
RESULT=obj;
;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // S3 ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;
cadenaValue+=String.valueOf(e)+" ";
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // S2 ::= S3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2",53, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // S2 ::= S3 OP2 S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2",53, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // S1 ::= S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1",52, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // S1 ::= S2 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1",52, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DATA22 ::= COM CADENA COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]=(String)e;
array[3]=false;
cadenaValue+=e+" ";
           
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DATA22 ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            array[2]=tablaForInt.get(i).getValue();
            cadenaValue+=tablaForInt.get(i).getValue()+" ";
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            Semanticos.add(new Errors((String)e,"No se puede asignar una variable booleana",-1,eleft,eright));
            break;
        }
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}
if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DATA22 ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;
cadenaValue+=String.valueOf(e)+" ";
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // S11 ::= 
            {
              Object RESULT =null;
		 RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11",55, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // S11 ::= OperadorLogico E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=""+e+" "+" "+e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11",55, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C ::= Bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C",29, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C ::= abreParen C S11 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		

;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C",29, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= Operador S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND1 ::= V22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1",17, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND1 ::= V22 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1",17, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // X22 ::= S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22",47, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // X22 ::= Operador S1 S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object []ob=new Object [2];

RESULT=ob;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22",47, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // V22 ::= abreParen COND1 X22 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
//Object obj1[]=(Object[])e;

//String txt="("+obj1[2]+e1+")";

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // V22 ::= DATA22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // V22 ::= DATA22 OP2 S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= V22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		 RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= V22 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
/*
*Modificando
*/

Object []obj1=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
RESULT=obj1;
System.out.println(obj1[2]);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E22 ::= CONDICION X22 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22",45, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E22 ::= C S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e+" "+e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22",45, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= INSTRUC 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG",21, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG",21, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= Id equals E22 puntoComa 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUC ::= SENTENCIAWHILE ASIG 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUC ::= SENTENCIAIF ASIG 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUC ::= PAINT ASIG 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUC ::= ASIGNACION ASIG 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCIONES ::= Inst abreParen Id cierraParen abreCor INSTRUC 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-5)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRING ::= SYMBOLS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRING ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRING ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRING ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CADENA ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA",14, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CADENA ::= STRING CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=e+""+e1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA",14, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP1 ::= Res 
            {
              Object RESULT =null;
		

RESULT=2;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1",10, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP1 ::= Sum 
            {
              Object RESULT =null;
		RESULT=1;


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1",10, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP2 ::= Div 
            {
              Object RESULT =null;
		RESULT=2;


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2",9, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP2 ::= Mul 
            {
              Object RESULT =null;
		RESULT=1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2",9, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= Double 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=Double.parseDouble((String)e);
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String msj="El identificador no existe";
boolean valid=true;
int valor=1;
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    try{
    valor=tablaForInt.get(i).getValorInt();
    RESULT=Double.parseDouble(String.valueOf(valor));
    valid=false;
    if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
    valid=true;
    }   
    }catch(Exception exs){
    msj="La variable no es de tipo entero";
    valid=true;
    }
    
     break;
   
}}
if(valid){
    RESULT=-1.5;
    parserPnt.Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= abreParen E cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=Double.parseDouble((String)e);
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= F 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= F OP2 T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;
System.out.println("Operacion"+e+" -> "+opc+" "+e2);
if(opc==1){
RESULT=(x1*x2);
}else{
RESULT=(x1/x2);
}
}catch(Exception ex){}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= T OP1 E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;
System.out.println("Operacion"+e+" -> "+opc+" "+e2);
if(opc==1){
RESULT=(x1+x2);
}else{
RESULT=(x1-x2);
}
}catch(Exception ex){}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // K ::= VALUES K 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // K ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCIONINT2 ::= coma Id equals E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);

tablaForInt.add(new tablaInt(value,(String)e,false,"int"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2",58, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCIONINT2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(-1,(String)e,true,"int"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2",58, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCIONINT1 ::= puntoComa 
            {
              Object RESULT =null;
		RESULT=-1.5;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1",57, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCIONINT1 ::= OPCIONINT2 OPCIONINT1 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1",57, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCINT ::= 
            {
              Object RESULT =null;
		RESULT=-1.5;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT",5, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCINT ::= equals E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT",5, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCIONSTRING2 ::= coma Id equals S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
String value=String.valueOf(e1);
tablaForInt.add(new tablaInt(value,(String)e,false,"str"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2",65, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCIONSTRING2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt("",(String)e,true,"str"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2",65, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCIONSTRING ::= puntoComa 
            {
              Object RESULT =null;
		RESULT="null";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING",64, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCIONSTRING ::= OPCIONSTRING2 OPCIONSTRING 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING",64, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPCSTR ::= 
            {
              Object RESULT =null;
		RESULT="null";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR",4, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPCSTR ::= equals S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR",4, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRINGX ::= String Id OPCSTR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
String value=String.valueOf(e1);
boolean isNull=false;
if(((String)e1).equals("null")){
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"str"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRINGX",66, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPCIONBOOL2 ::= coma Id equals E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=Boolean.parseBoolean(String.valueOf(e1));
tablaForInt.add(new tablaInt(value,(String)e,false,"bool"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2",63, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPCIONBOOL2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(false,(String)e,true,"bool"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2",63, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPCIONBOOL ::= puntoComa 
            {
              Object RESULT =null;
		RESULT="error";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL",62, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCIONBOOL ::= OPCIONBOOL2 OPCIONBOOL 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL",62, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCBOOL ::= 
            {
              Object RESULT =null;
		RESULT="error";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL",3, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCBOOL ::= equals E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL",3, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BOOLEAN ::= Boolean Id OPCBOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=Boolean.parseBoolean(String.valueOf(e1));
boolean isNull=false;
if(e1!=null){
if(((String)e1).equals("error")){

isNull=true;
}
}else{
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"bool"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("BOOLEAN",61, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INT ::= Int Id OPCINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);
boolean isNull=false;
if((double)e1==-1.5){
isNull=true;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"int"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INT",59, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALUES ::= STRINGX OPCIONSTRING 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALUES ::= BOOLEAN OPCIONBOOL 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALUES ::= INT OPCIONINT1 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= Vars abreCor VALUES 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A ::= VARIABLES K 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SYMBOLS ::= cierraParen 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SYMBOLS ::= abreParen 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SYMBOLS ::= Div 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SYMBOLS ::= Mul 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SYMBOLS ::= Res 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SYMBOLS ::= Sum 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		RESULT = start_val;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserPnt$parser.done_parsing();
          return CUP$parserPnt$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

