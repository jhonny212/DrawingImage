
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 21 23:24:07 CST 2020
//----------------------------------------------------

package AnalizadorPnt;

import static AnalizadorPnt.parserPnt.Semanticos;
import static AnalizadorPnt.parserPnt.Variables;
import static AnalizadorPnt.parserPnt.containsBool;
import static AnalizadorPnt.parserPnt.containsLleter;
import static AnalizadorPnt.parserPnt.getObj;
import static AnalizadorPnt.parserPnt.tablaForInt;

import static AnalizadorPnt.parserPnt.tipoVar;
import TablaDeSimbolos.tablaInt;

import drawgif.Errors;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 21 23:24:07 CST 2020
  */
public class parserPnt extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserPnt() {super();}

  /** Constructor which sets the default scanner. */
  public parserPnt(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserPnt(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\105\003\000\002\105\003\000" +
    "\002\106\005\000\002\062\004\000\002\062\002\000\002" +
    "\002\004\000\002\003\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\075\005\000\002\077\005" +
    "\000\002\005\004\000\002\005\002\000\002\100\004\000" +
    "\002\100\003\000\002\101\004\000\002\101\006\000\002" +
    "\104\005\000\002\006\004\000\002\006\002\000\002\102" +
    "\004\000\002\102\003\000\002\103\004\000\002\103\006" +
    "\000\002\007\004\000\002\007\002\000\002\073\004\000" +
    "\002\073\003\000\002\074\004\000\002\074\006\000\002" +
    "\010\003\000\002\010\004\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\020\004\000\002\020\002\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\057\004\000\002\057\004\000\002\061\005\000" +
    "\002\061\003\000\002\071\004\000\002\071\002\000\002" +
    "\021\005\000\002\021\003\000\002\060\005\000\002\060" +
    "\003\000\002\060\006\000\002\023\005\000\002\023\003" +
    "\000\002\037\006\000\002\037\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\005\000\002\066\005\000\002" +
    "\066\003\000\002\067\005\000\002\067\003\000\002\070" +
    "\003\000\002\070\005\000\002\070\003\000\002\070\005" +
    "\000\002\025\011\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\006\000\002" +
    "\027\003\000\002\027\004\000\002\030\010\000\002\031" +
    "\007\000\002\032\015\000\002\034\003\000\002\034\005" +
    "\000\002\042\005\000\002\051\004\000\002\051\002\000" +
    "\002\072\004\000\002\072\002\000\002\064\004\000\002" +
    "\064\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\004\006\001\002\000\004\036\206\001" +
    "\002\000\004\002\204\001\002\000\004\005\202\001\002" +
    "\000\012\006\015\007\014\011\017\012\013\001\002\000" +
    "\006\013\174\014\172\001\002\000\006\013\165\014\164" +
    "\001\002\000\006\013\155\014\154\001\002\000\004\010" +
    "\104\001\002\000\004\010\064\001\002\000\004\036\uffdb" +
    "\001\002\000\004\036\ufff5\001\002\000\004\010\022\001" +
    "\002\000\012\006\015\007\014\011\017\012\013\001\002" +
    "\000\004\036\uffda\001\002\000\010\013\uffe6\014\uffe6\015" +
    "\023\001\002\000\012\010\025\022\032\023\031\031\033" +
    "\001\002\000\006\013\uffe8\014\uffe8\001\002\000\026\013" +
    "\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf" +
    "\027\uffaf\044\uffaf\045\uffaf\001\002\000\026\013\uffb2\014" +
    "\uffb2\016\uffb2\017\uffb2\020\061\021\062\024\uffb2\027\uffb2" +
    "\044\uffb2\045\uffb2\001\002\000\022\013\uffb4\014\uffb4\016" +
    "\055\017\054\024\uffb4\027\uffb4\044\uffb4\045\uffb4\001\002" +
    "\000\006\013\uffe7\014\uffe7\001\002\000\012\010\025\022" +
    "\032\023\031\031\033\001\002\000\026\013\uffb1\014\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\024\uffb1\027\uffb1\044" +
    "\uffb1\045\uffb1\001\002\000\026\010\036\016\044\017\046" +
    "\020\037\021\035\022\042\023\047\024\045\026\040\031" +
    "\uffcc\001\002\000\004\031\051\001\002\000\026\010\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\026\ufffd\031\ufffd\001\002\000\026\010\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026" +
    "\uffca\031\uffca\001\002\000\026\010\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\031" +
    "\ufffe\001\002\000\026\010\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\031\uffcb\001" +
    "\002\000\026\010\036\016\044\017\046\020\037\021\035" +
    "\022\042\023\047\024\045\026\040\031\uffcc\001\002\000" +
    "\026\010\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\026\uffc9\031\uffc9\001\002\000\026\010" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\031\uffc8\001\002\000\026\010\000\016" +
    "\000\017\000\020\000\021\000\022\000\023\000\024\000" +
    "\026\000\031\000\001\002\000\026\010\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb" +
    "\031\ufffb\001\002\000\026\010\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff\031\uffff" +
    "\001\002\000\026\010\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\031\ufffc\001\002" +
    "\000\004\031\uffcd\001\002\000\026\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\024\uffae\027\uffae\044\uffae" +
    "\045\uffae\001\002\000\004\024\053\001\002\000\026\013" +
    "\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0" +
    "\027\uffb0\044\uffb0\045\uffb0\001\002\000\014\010\uffce\022" +
    "\uffce\023\uffce\025\uffce\031\uffce\001\002\000\014\010\uffcf" +
    "\022\uffcf\023\uffcf\025\uffcf\031\uffcf\001\002\000\012\010" +
    "\025\022\032\023\031\031\033\001\002\000\016\013\uffb5" +
    "\014\uffb5\024\uffb5\027\uffb5\044\uffb5\045\uffb5\001\002\000" +
    "\012\010\025\022\032\023\031\031\033\001\002\000\014" +
    "\010\uffd1\022\uffd1\023\uffd1\025\uffd1\031\uffd1\001\002\000" +
    "\014\010\uffd0\022\uffd0\023\uffd0\025\uffd0\031\uffd0\001\002" +
    "\000\022\013\uffb3\014\uffb3\016\uffb3\017\uffb3\024\uffb3\027" +
    "\uffb3\044\uffb3\045\uffb3\001\002\000\010\013\uffe0\014\uffe0" +
    "\015\066\001\002\000\006\013\ufff0\014\ufff0\001\002\000" +
    "\012\010\067\022\074\023\075\025\070\001\002\000\022" +
    "\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\024" +
    "\uffd3\035\uffd3\001\002\000\022\013\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\024\uffd2\035\uffd2\001\002\000" +
    "\016\013\uffd8\014\uffd8\016\055\017\054\024\uffd8\035\uffd8" +
    "\001\002\000\022\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020" +
    "\061\021\062\024\uffd6\035\uffd6\001\002\000\006\013\uffe1" +
    "\014\uffe1\001\002\000\022\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\035\uffd5\001\002\000\012" +
    "\010\067\022\074\023\075\025\070\001\002\000\004\024" +
    "\077\001\002\000\022\013\uffd4\014\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\024\uffd4\035\uffd4\001\002\000\012\010" +
    "\067\022\074\023\075\025\070\001\002\000\016\013\uffd7" +
    "\014\uffd7\016\uffd7\017\uffd7\024\uffd7\035\uffd7\001\002\000" +
    "\012\010\067\022\074\023\075\025\070\001\002\000\012" +
    "\013\uffd9\014\uffd9\024\uffd9\035\uffd9\001\002\000\010\013" +
    "\uffed\014\uffed\015\106\001\002\000\006\013\uffef\014\uffef" +
    "\001\002\000\014\010\111\022\113\023\117\030\114\031" +
    "\116\001\002\000\014\013\uffc2\014\uffc2\024\uffc2\044\124" +
    "\045\126\001\002\000\022\013\uffc0\014\uffc0\016\055\017" +
    "\054\024\uffc0\027\uffc0\044\uffc0\045\uffc0\001\002\000\026" +
    "\013\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\024" +
    "\uffb7\027\uffb7\044\uffb7\045\uffb7\001\002\000\006\013\uffee" +
    "\014\uffee\001\002\000\026\013\uffb8\014\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\024\uffb8\027\uffb8\044\uffb8\045\uffb8" +
    "\001\002\000\014\013\uffb9\014\uffb9\024\uffb9\044\uffb9\045" +
    "\uffb9\001\002\000\026\013\uffbe\014\uffbe\016\uffbe\017\uffbe" +
    "\020\061\021\062\024\uffbe\027\uffbe\044\uffbe\045\uffbe\001" +
    "\002\000\026\010\036\016\044\017\046\020\037\021\035" +
    "\022\042\023\047\024\045\026\040\031\uffcc\001\002\000" +
    "\014\010\111\022\113\023\117\030\114\031\116\001\002" +
    "\000\016\013\uffc2\014\uffc2\024\uffc2\027\122\044\124\045" +
    "\126\001\002\000\014\010\111\022\113\023\117\030\114" +
    "\031\116\001\002\000\012\010\025\022\032\023\031\031" +
    "\033\001\002\000\010\013\uffc4\014\uffc4\024\uffc4\001\002" +
    "\000\014\010\ufffa\022\ufffa\023\ufffa\030\ufffa\031\ufffa\001" +
    "\002\000\010\013\uffc6\014\uffc6\024\uffc6\001\002\000\014" +
    "\010\ufff9\022\ufff9\023\ufff9\030\ufff9\031\ufff9\001\002\000" +
    "\014\013\uffc2\014\uffc2\024\uffc2\044\124\045\126\001\002" +
    "\000\010\013\uffc5\014\uffc5\024\uffc5\001\002\000\010\013" +
    "\uffc3\014\uffc3\024\uffc3\001\002\000\010\024\uffc2\044\124" +
    "\045\126\001\002\000\016\016\055\017\054\024\uffbb\027" +
    "\uffbb\044\uffbb\045\uffbb\001\002\000\012\024\uffc2\027\122" +
    "\044\124\045\126\001\002\000\004\024\136\001\002\000" +
    "\022\013\uffbd\014\uffbd\016\uffbd\017\uffbd\024\uffbd\027\uffbd" +
    "\044\uffbd\045\uffbd\001\002\000\012\010\025\022\032\023" +
    "\031\031\033\001\002\000\012\024\uffbc\027\uffbc\044\uffbc" +
    "\045\uffbc\001\002\000\004\024\142\001\002\000\014\013" +
    "\uffba\014\uffba\024\uffba\044\uffba\045\uffba\001\002\000\004" +
    "\031\144\001\002\000\026\013\uffb6\014\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\024\uffb6\027\uffb6\044\uffb6\045\uffb6" +
    "\001\002\000\012\010\025\022\032\023\031\031\033\001" +
    "\002\000\022\013\uffbf\014\uffbf\016\uffbf\017\uffbf\024\uffbf" +
    "\027\uffbf\044\uffbf\045\uffbf\001\002\000\012\010\025\022" +
    "\032\023\031\031\033\001\002\000\016\013\uffc1\014\uffc1" +
    "\024\uffc1\027\uffc1\044\uffc1\045\uffc1\001\002\000\010\013" +
    "\uffc7\014\uffc7\024\uffc7\001\002\000\006\013\155\014\154" +
    "\001\002\000\012\006\ufff2\007\ufff2\011\ufff2\012\ufff2\001" +
    "\002\000\004\010\156\001\002\000\012\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\001\002\000\010\013\uffea\014\uffea\015" +
    "\157\001\002\000\014\010\111\022\113\023\117\030\114" +
    "\031\116\001\002\000\006\013\uffe9\014\uffe9\001\002\000" +
    "\012\006\uffec\007\uffec\011\uffec\012\uffec\001\002\000\006" +
    "\013\165\014\164\001\002\000\012\006\ufff3\007\ufff3\011" +
    "\ufff3\012\ufff3\001\002\000\004\010\166\001\002\000\012" +
    "\006\uffde\007\uffde\011\uffde\012\uffde\001\002\000\010\013" +
    "\uffdd\014\uffdd\015\167\001\002\000\012\010\067\022\074" +
    "\023\075\025\070\001\002\000\006\013\uffdc\014\uffdc\001" +
    "\002\000\012\006\uffdf\007\uffdf\011\uffdf\012\uffdf\001\002" +
    "\000\004\010\177\001\002\000\012\006\ufff1\007\ufff1\011" +
    "\ufff1\012\ufff1\001\002\000\012\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\001\002\000\006\013\174\014\172\001\002\000" +
    "\012\006\uffe5\007\uffe5\011\uffe5\012\uffe5\001\002\000\010" +
    "\013\uffe3\014\uffe3\015\200\001\002\000\012\010\025\022" +
    "\032\023\031\031\033\001\002\000\006\013\uffe2\014\uffe2" +
    "\001\002\000\010\007\014\011\017\012\013\001\002\000" +
    "\012\006\ufff4\007\ufff4\011\ufff4\012\ufff4\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufff6\036\206\001\002\000" +
    "\004\023\207\001\002\000\004\010\210\001\002\000\004" +
    "\024\211\001\002\000\004\005\212\001\002\000\012\010" +
    "\217\037\214\041\216\042\213\001\002\000\004\023\255" +
    "\001\002\000\004\023\246\001\002\000\016\006\uffab\010" +
    "\uffab\034\uffab\037\uffab\041\uffab\042\uffab\001\002\000\004" +
    "\023\233\001\002\000\004\015\230\001\002\000\016\006" +
    "\uffaa\010\uffaa\034\uffaa\037\uffaa\041\uffaa\042\uffaa\001\002" +
    "\000\016\006\uffac\010\uffac\034\uffac\037\uffac\041\uffac\042" +
    "\uffac\001\002\000\014\006\224\010\217\037\214\041\216" +
    "\042\213\001\002\000\016\006\uffa9\010\uffa9\034\uffa9\037" +
    "\uffa9\041\uffa9\042\uffa9\001\002\000\006\002\uffa7\036\uffa7" +
    "\001\002\000\006\002\uffad\036\uffad\001\002\000\014\006" +
    "\224\010\217\037\214\041\216\042\213\001\002\000\006" +
    "\002\uffa6\036\uffa6\001\002\000\014\010\111\022\113\023" +
    "\117\030\114\031\116\001\002\000\004\013\232\001\002" +
    "\000\016\006\uffa8\010\uffa8\034\uffa8\037\uffa8\041\uffa8\042" +
    "\uffa8\001\002\000\014\010\111\022\113\023\117\030\114" +
    "\031\116\001\002\000\004\024\235\001\002\000\004\033" +
    "\237\001\002\000\016\006\uffa4\010\uffa4\034\uffa4\037\uffa4" +
    "\041\uffa4\042\uffa4\001\002\000\014\010\217\034\uff9e\037" +
    "\214\041\216\042\213\001\002\000\004\034\245\001\002" +
    "\000\014\010\217\034\uff9c\037\214\041\216\042\213\001" +
    "\002\000\004\034\uff9f\001\002\000\014\010\217\034\uff9c" +
    "\037\214\041\216\042\213\001\002\000\004\034\uff9d\001" +
    "\002\000\020\006\uffa0\010\uffa0\034\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\001\002\000\014\010\111\022\113\023" +
    "\117\030\114\031\116\001\002\000\004\024\250\001\002" +
    "\000\004\033\237\001\002\000\020\006\uff9a\010\uff9a\034" +
    "\uff9a\037\uff9a\040\253\041\uff9a\042\uff9a\001\002\000\016" +
    "\006\uffa5\010\uffa5\034\uffa5\037\uffa5\041\uffa5\042\uffa5\001" +
    "\002\000\004\033\237\001\002\000\016\006\uff9b\010\uff9b" +
    "\034\uff9b\037\uff9b\041\uff9b\042\uff9b\001\002\000\012\010" +
    "\025\022\032\023\031\031\033\001\002\000\004\014\257" +
    "\001\002\000\012\010\025\022\032\023\031\031\033\001" +
    "\002\000\004\014\261\001\002\000\012\010\067\022\074" +
    "\023\075\025\070\001\002\000\010\014\uffa2\024\uffa2\035" +
    "\270\001\002\000\004\014\264\001\002\000\012\010\067" +
    "\022\074\023\075\025\070\001\002\000\004\024\266\001" +
    "\002\000\004\013\267\001\002\000\016\006\uffa3\010\uffa3" +
    "\034\uffa3\037\uffa3\041\uffa3\042\uffa3\001\002\000\012\010" +
    "\067\022\074\023\075\025\070\001\002\000\006\014\uffa1" +
    "\024\uffa1\001\002\000\006\002\ufff6\036\206\001\002\000" +
    "\004\002\ufff8\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\010\002\003\003\006\106\004\001\001\000" +
    "\004\025\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\017\010\015\075\010\077\011\104\007\001" +
    "\001\000\006\102\172\103\174\001\001\000\006\073\162" +
    "\074\161\001\001\000\006\100\152\101\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\017\010\020\075" +
    "\010\077\011\104\007\001\001\000\002\001\001\000\004" +
    "\006\023\001\001\000\010\066\027\067\026\070\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\057" +
    "\001\001\000\004\014\055\001\001\000\002\001\001\000" +
    "\010\066\051\067\026\070\025\001\001\000\002\001\001" +
    "\000\010\020\033\035\042\076\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\047\035\042\076\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\066" +
    "\056\067\026\070\025\001\001\000\002\001\001\000\006" +
    "\067\062\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\064\001\001\000\002" +
    "\001\001\000\010\011\072\012\070\015\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\101\001\001" +
    "\000\004\013\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\075\012\070\015\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\100\015\071\001" +
    "\001\000\002\001\001\000\010\011\102\012\070\015\071" +
    "\001\001\000\002\001\001\000\004\005\104\001\001\000" +
    "\002\001\001\000\014\021\117\037\106\057\111\060\107" +
    "\065\114\001\001\000\006\071\150\105\120\001\001\000" +
    "\004\014\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\144\001" +
    "\001\000\010\020\142\035\042\076\040\001\001\000\012" +
    "\023\133\037\131\060\132\065\114\001\001\000\010\061" +
    "\124\071\122\105\120\001\001\000\014\021\117\037\106" +
    "\057\130\060\107\065\114\001\001\000\010\066\126\067" +
    "\026\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\071\127\105" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\140\105\120\001\001\000\004\014\136\001\001\000" +
    "\010\061\134\071\122\105\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\066\137\067\026\070\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\145\070" +
    "\025\001\001\000\002\001\001\000\010\066\147\067\026" +
    "\070\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\100\160\101\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\117\037\106\057\157\060\107\065\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\170\074\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\167\012\070\015\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\102\175\103" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\200\067\026\070\025\001\001\000\002\001\001\000" +
    "\012\004\202\075\010\077\011\104\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\271\062\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\221\026\220\030\217\031" +
    "\222\032\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\225\026\220" +
    "\027\224\030\217\031\222\032\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\225" +
    "\026\220\027\226\030\217\031\222\032\214\001\001\000" +
    "\002\001\001\000\014\021\117\037\106\057\230\060\107" +
    "\065\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\117\037\106\057\233\060\107\065\114\001\001" +
    "\000\002\001\001\000\004\042\235\001\001\000\002\001" +
    "\001\000\016\024\240\026\220\030\217\031\222\032\214" +
    "\051\237\001\001\000\002\001\001\000\016\024\242\026" +
    "\220\030\217\031\222\032\214\072\241\001\001\000\002" +
    "\001\001\000\016\024\242\026\220\030\217\031\222\032" +
    "\214\072\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\117\037\106\057\246\060\107\065\114\001" +
    "\001\000\002\001\001\000\004\042\250\001\001\000\004" +
    "\064\251\001\001\000\002\001\001\000\004\042\253\001" +
    "\001\000\002\001\001\000\010\066\255\067\026\070\025" +
    "\001\001\000\002\001\001\000\010\066\257\067\026\070" +
    "\025\001\001\000\002\001\001\000\012\011\261\012\070" +
    "\015\071\034\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\261\012\070\015\071\034\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\270\012\070\015\071\001\001\000\002\001\001" +
    "\000\006\025\271\062\273\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserPnt$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserPnt$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserPnt$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<tablaInt> tablaForInt;
    public static ArrayList<Errors> Semanticos;
    public static boolean containsLleter,containsBool;
        
public static int tipoVar,tipoOperacion;
public static String Variables,condicion,cadenaPrev;

   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

 public static Object[] getObj(Object [] obj1,Object [] obj2,int opc, int cases,int e2left,int e2right){

int type=(int)obj1[0]+(int)obj2[0];
String x1=(String)obj1[2];
String x2=(String)obj2[2];
boolean bool=(boolean)obj2[3];
if(bool){
    obj1[3]=true;
}
     if(cases==1){

if(type==2){
int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1+v2;
    obj1[2]=x1+"+"+x2;
 
    return obj1;
    case 2:
    obj1[1]=v1-v2;
    obj1[2]=x1+"-"+x2;
  
    return obj1;
 
}
}else{
obj1[0]=2;    
    
if(opc==1){
  
    obj1[2]=x1+"+"+x2;
}else{
 
  obj1[2]=x1+"-"+x2;
}
return obj1;
}     
     }else{

if(type==2){

int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1*v2;
    obj1[2]=x1+"*"+x2;
  
    return obj1;
    case 2:
    if(v2==0){
        v2=-1;
        Semanticos.add(new Errors(String.valueOf(v2),"No se puede dividir entre cero",-1,e2left,e2right));
    }
    obj1[1]=v1/v2;
    obj1[2]=x1+"/"+x2;
   
    return obj1;
}
}else{
Semanticos.add(new Errors(String.valueOf(obj1[0]),"Error en Operadores para una cadena, solo se puede concatenar",-1,e2left,e2right));
   
obj1[0]=2;    
if(opc==1){
 
    obj1[2]=x1+"*"+x2;
}else{

  obj1[2]=x1+"/"+x2;
}
return obj1;
}
     }
 return null;
 }

 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserPnt$actions {
  private final parserPnt parser;

  /** Constructor */
  CUP$parserPnt$actions(parserPnt parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserPnt$do_action(
    int                        CUP$parserPnt$act_num,
    java_cup.runtime.lr_parser CUP$parserPnt$parser,
    java.util.Stack            CUP$parserPnt$stack,
    int                        CUP$parserPnt$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserPnt$result;

      /* select the action based on the action number */
      switch (CUP$parserPnt$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // C22 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C22",50, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // C22 ::= Else V 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT="else"+(String)e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C22",50, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // S22 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S22",56, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // S22 ::= INSTRUC S22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=(String)e+(String)e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S22",56, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Datas ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Datas ::= INSTRUC S22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=(String)e+(String)e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("Datas",39, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // V ::= abreLlaves Datas cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		RESULT="\n{\n"+e+"\n}\n";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V",32, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAM2 ::= E Punto E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
int value=(int)((double)e);
int value2=(int)((double)e1);
int vector[]={value,value2};
RESULT= vector; 

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2",26, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAM2 ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
int value=(int)((double)e); 
int vector[]={value,-9999};
RESULT= vector; 

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PARAM2",26, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PAINT ::= pintar abreParen S1 coma S1 coma PARAM2 coma PARAM2 cierraParen puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		
Object ob[]=(Object[])e;
Object ob2[]=(Object[])e1;
boolean bool=(boolean)ob[3];
String t1=(String)ob[2];
String t2=(String)ob2[2];

if(!bool){
   //Semanticos.add(new Errors(t1,"Error en el parametro 1, debe contener al menos una cadena",-1,eleft,eright));
}
bool=(boolean)ob2[3];
if(!bool){
   //Semanticos.add(new Errors(t2,"Error en el parametro 2, debe contener al menos una cadena",-1,e1left,e1right));
}
String txt = "";
int vector1[]=(int [])e2;
int vector2[]=(int [])e3;
txt=" pintar("+t1+","+t2+","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";

if(Semanticos.size()==1){
    int is=0;
   if(t1.contains("+")){
       is++;
      
   }
    if(t2.contains("+")){
       is++;
          
   }
    if(t2.contains("*")|| t2.contains("/")){is=3;}
     if(t1.contains("*")|| t1.contains("/")){is=3;}
   if(is==1 || is==0){
    Semanticos=new ArrayList();
    if(t1.contains("\"")){
    txt=" pintar("+t1+",\""+t2+"\","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
    }else{
    txt=" pintar(\""+t1+"\","+t2+","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
    }
   }
}
else if(Semanticos.size()==2){
    if(!t1.contains("+") &&  !t2.contains("+")){
        if(t2.contains("*")|| t2.contains("/") || t1.contains("*")|| t1.contains("/")){

        }else{
        Semanticos=new ArrayList();
        txt=" pintar(\""+t1+"\",\""+t2+"\","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
        }
    }
}



RESULT=txt;
containsLleter=false;
containsBool=false;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("PAINT",24, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-10)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIAWHILE ::= While abreParen E22 cierraParen V 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		

String txt="while(";
try{
Condicion con=(Condicion)e;
txt+=con.letter+")";
RESULT=txt+(String)e1;
}
catch(Exception ex){
    Object ob[]=(Object[])e;
    Semanticos.add(new Errors((String)ob[2],"Error, una sentecia if debe contener operaciones logicas",-1,eleft,eright));
    RESULT="";
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAWHILE",23, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIAIF ::= If abreParen E22 cierraParen V C22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String txt="if(";
try{
Condicion con=(Condicion)e;
txt+=con.letter+")";

RESULT=txt+(String)e1+(String)e2;
}
catch(Exception ex){
    Object ob[]=(Object[])e;
    Semanticos.add(new Errors((String)ob[2],"Error, una sentecia if debe contener operaciones logicas",-1,eleft,eright));
    RESULT="";
}


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF",22, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-5)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIG ::= INSTRUC ASIG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=(String)e+(String)e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG",21, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIG ::= cierraCor 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIG",21, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION ::= Id equals E22 puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
String Id=String.valueOf(e);
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        tablaForInt.get(i).setIsNull(false);
        switch(type){
            case 1:
            if(containsLleter || containsBool){
            Semanticos.add(new Errors("=","Despues de token =, tiene que asignarse a un valor entero",-1,e1left,e1right));
            }
           
            break;
            case 2:
            if(!containsLleter || containsBool){
              Semanticos.add(new Errors("=","Despues de token =, debe contener al menos una cadena",-1,e1left,e1right));
            }
            
            break;
            case 3:
            break;
        }
         containsLleter=false;
         containsBool=false;
        break;
        }
}

try{
Condicion con=(Condicion)e1;
RESULT=(String)e+"="+con.letter+";";
}catch(Exception ex){
    Object ob[]=(Object[])e1;
    RESULT=(String)e+"="+ob[2]+";";
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUC ::= SENTENCIAWHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUC ::= SENTENCIAIF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUC ::= PAINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUC ::= ASIGNACION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUC",18, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCIONES ::= Inst abreParen Id cierraParen abreCor INSTRUC ASIG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String methoD="String Id="+(String)e+"\n";
methoD+=(String)e1+(String)e2;
System.out.println(methoD);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-6)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // S3 ::= COM CADENA COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
Object array[]=new Object[4];
containsLleter=true;
array[0]=2;
array[1]=-1;
array[2]="\""+(String)e+"\"";
array[3]=true;
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // S3 ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;
boolean entro=false;
String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        entro=false;
        int type=tablaForInt.get(i).type();
        array[0]=type;
        if(type==2){
            containsLleter=true;
            array[3]=true;
        }
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            Semanticos.add(new Errors((String)e,"No se puede asignar una variable booleana",-1,eleft,eright));
            containsBool=true;
            break;
        }
            
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}
array[2]=Id;
if(entro){
    
}        
if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // S3 ::= abreParen S1 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
Object obj[]=(Object[])e;
String aux=(String)obj[2];
obj[2]="("+aux+")";
RESULT=obj;
;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // S3 ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S3",54, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // S2 ::= S3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2",53, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // S2 ::= S3 OP2 S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S2",53, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // S1 ::= S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1",52, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // S1 ::= S2 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S1",52, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DATA22 ::= COM CADENA COM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
containsLleter=true;
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]="\""+(String)e+"\"";
array[3]=false;
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DATA22 ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
       
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            containsLleter=true;
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            containsBool=true;
            break;
        }
        array[2]=Id;
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}


if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
   array[3]=true;
}
RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DATA22 ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("DATA22",51, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // C ::= Bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=Boolean.parseBoolean((String)e);
containsBool=true;
;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C",29, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C ::= abreParen C S11 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion((boolean)e,next);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}catch(Exception ex){
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("C",29, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND1 ::= V22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1",17, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND1 ::= V22 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("COND1",17, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // V22 ::= abreParen COND1 X22 cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		
if(e1!=null){
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion(e,next);
String letter=cond.letter;
cond.setLetter("("+letter+")");
RESULT=cond;
}catch(Exception ex){
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}
}else{
try{
Object obj[]=(Object[])e;
obj[2]="("+obj[2]+")";    
RESULT=e;
}catch(Exception ex){
Condicion cnd=(Condicion) e;
cnd.setLetter("("+cnd.letter+")");
RESULT=cnd;
}    
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // V22 ::= DATA22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // V22 ::= DATA22 OP2 S2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("V22",46, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION ::= V22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		 RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= V22 OP1 S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // S11 ::= 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11",55, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // S11 ::= OperadorLogico E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=new extraClass((String)e,(Condicion)e1);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("S11",55, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // X22 ::= S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=e;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22",47, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // X22 ::= Operador S1 S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object obj[]=(Object[])e1;
String op=(String)e;
int typo=(int)obj[0];
RESULT=new extraClass(op,typo,String.valueOf(obj[2]),(extraClass)e2);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("X22",47, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E22 ::= CONDICION X22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion(e,next);
RESULT=cond;
}catch(Exception ex){
try{
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
RESULT=cond;
}   catch(Exception ss){
RESULT=e;
} 
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22",45, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E22 ::= C S11 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		

try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion((boolean)e,next);
RESULT=cond;
}catch(Exception ex){
Condicion c=(Condicion)e;
Condicion cond =new Condicion(c,(extraClass)e1);
RESULT=cond;
}



              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E22",45, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRING ::= SYMBOLS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRING ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRING ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRING ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRING",60, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CADENA ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA",14, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CADENA ::= STRING CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=e+""+e1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("CADENA",14, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP1 ::= Res 
            {
              Object RESULT =null;
		

RESULT=2;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1",10, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP1 ::= Sum 
            {
              Object RESULT =null;
		RESULT=1;


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP1",10, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP2 ::= Div 
            {
              Object RESULT =null;
		RESULT=2;


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2",9, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP2 ::= Mul 
            {
              Object RESULT =null;
		RESULT=1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OP2",9, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // F ::= Double 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=Double.parseDouble((String)e);
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // F ::= Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String msj="El identificador no existe";
boolean valid=true;
int valor=1;
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    try{
    valor=tablaForInt.get(i).getValorInt();
    RESULT=Double.parseDouble(String.valueOf(valor));
    valid=false;
    if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
    valid=true;
    }   
    }catch(Exception exs){
    msj="La variable no es de tipo entero";
    valid=true;
    }
    
     break;
   
}}
if(valid){
    RESULT=-1.5;
    parserPnt.Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // F ::= abreParen E cierraParen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F ::= Num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=Double.parseDouble((String)e);
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= F 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= F OP2 T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1*x2);
}else{
RESULT=(x1/x2);
}
}catch(Exception ex){}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= T OP1 E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1+x2);
}else{
RESULT=(x1-x2);
}
}catch(Exception ex){}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // K ::= VALUES K 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
    RESULT=(String)e+(String)e1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // K ::= cierraCor 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCIONINT2 ::= coma Id equals E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);

tablaForInt.add(new tablaInt(value,(String)e,false,"int"));

RESULT=","+(String)e+" = "+String.valueOf(value);


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2",58, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCIONINT2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(-1,(String)e,true,"int"));
RESULT=","+(String)e;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT2",58, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCIONINT1 ::= puntoComa 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1",57, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCIONINT1 ::= OPCIONINT2 OPCIONINT1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
RESULT=(String)e+(String)e1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONINT1",57, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPCINT ::= 
            {
              Object RESULT =null;
		RESULT=-1.5;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT",5, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPCINT ::= equals E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCINT",5, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPCIONSTRING2 ::= coma Id equals S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
Object obj[]=(Object[])e1;
if(!containsLleter){
     Semanticos.add(new Errors((String)obj[2],"Despues de =, debe contener al menos el valor de una cadena",-1,eleft,eright));
}
    containsLleter=false;
//String value=String.valueOf(e1);
tablaForInt.add(new tablaInt("",(String)e,false,"str"));
RESULT=","+e+"="+obj[2];

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2",65, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPCIONSTRING2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt("",(String)e,true,"str"));
RESULT=","+e;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING2",65, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPCIONSTRING ::= puntoComa 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING",64, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCIONSTRING ::= OPCIONSTRING2 OPCIONSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=""+e+""+e1;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONSTRING",64, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCSTR ::= 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR",4, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCSTR ::= equals S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
Object obj[]=(Object[])e;
if(!containsLleter){
     Semanticos.add(new Errors((String)obj[2],"Despues de =, debe contener al menos el valor de una cadena",-1,eleft,eright));
}
    containsLleter=false;
RESULT="="+obj[2];


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCSTR",4, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRINGX ::= String Id OPCSTR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

boolean isNull=false;
if(e1==null){
isNull=true;
RESULT=(String)e;
}else{
    RESULT=(String)e+(String)e1;
}
tablaForInt.add(new tablaInt("",(String)e,isNull,"str"));

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("STRINGX",66, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCIONBOOL2 ::= coma Id equals E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String msj="";
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=true;
tablaForInt.add(new tablaInt(value,(String)e,false,"bool"));
try{
Condicion tmp=(Condicion)e1;
msj=tmp.letter;
}catch(Exception ex){
Object obj[]=(Object[])e1;
msj=(String)obj[2];
}

RESULT=","+(String)e+"="+msj;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2",63, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-3)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCIONBOOL2 ::= coma Id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(false,(String)e,true,"bool"));
RESULT=","+(String)e;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL2",63, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPCIONBOOL ::= puntoComa 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL",62, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPCIONBOOL ::= OPCIONBOOL2 OPCIONBOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
if(e1!=null){
RESULT=(String)e+(String)e1;
}else{
RESULT=(String)e;
}

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCIONBOOL",62, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPCBOOL ::= 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL",3, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPCBOOL ::= equals E22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
String retorno="";
try{
Condicion tmp=(Condicion)e;
int tipo=tmp.getTipo();
retorno="="+tmp.letter;
if(tipo!=3){
    if(tmp.letter.contains("&&")|| tmp.letter.contains("||") 
    ||tmp.letter.contains(">")||tmp.letter.contains("<")||tmp.letter.contains("equals")
    ||tmp.letter.contains("<=") || tmp.letter.contains(">=") ||tmp.letter.contains("==")
    ||tmp.letter.contains("!=")){

    }else{
    Semanticos.add(new Errors(tmp.letter,"Se debe asignar un valor logico (booleano)",-1,eleft,eright));
    }
    }
}catch(Exception ex){
    Object obj[]=(Object[])e;
    int tipo=(int) obj[0];
    if(tipo!=3){
    Semanticos.add(new Errors((String)obj[2],"Se debe asignar un valor logico (booleano)",-1,eleft,eright));
    }
    retorno="="+obj[2];
}


RESULT=retorno;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OPCBOOL",3, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BOOLEAN ::= Boolean Id OPCBOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=true;
boolean isNull=false;
if(e1==null){
 isNull=true;
 RESULT=(String)e;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"bool"));
RESULT=(String)e+(String)e1;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("BOOLEAN",61, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INT ::= Int Id OPCINT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);
boolean isNull=false;
if((double)e1==-1.5){
isNull=true;
RESULT=(String)e;
}else{
RESULT=(String)e+"="+String.valueOf(value);
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"int"));


              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("INT",59, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALUES ::= STRINGX OPCIONSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT="String "+e+" "+e1+";\n";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALUES ::= BOOLEAN OPCIONBOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT="boolean "+e+" "+e1+";\n";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALUES ::= INT OPCIONINT1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT="int "+e+" "+e1+";\n";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VALUES",2, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= Vars abreCor VALUES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		RESULT=e;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // A ::= VARIABLES K 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.peek()).value;
		
containsBool=false;
containsLleter=false;
String txt=String.valueOf(e)+" "+String.valueOf(e1);
Variables=txt.replace("null","");
System.out.println(Variables);

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // T22 ::= 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T22",48, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // T22 ::= INSTRUCCIONES T22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("T22",48, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AS ::= A INSTRUCCIONES T22 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("AS",68, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-2)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OperadorLogico ::= Or 
            {
              Object RESULT =null;
		RESULT="||";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OperadorLogico",67, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OperadorLogico ::= And 
            {
              Object RESULT =null;
		RESULT="&&";
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("OperadorLogico",67, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SYMBOLS ::= cierraParen 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SYMBOLS ::= abreParen 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SYMBOLS ::= Div 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SYMBOLS ::= Mul 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SYMBOLS ::= Res 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SYMBOLS ::= Sum 
            {
              Object RESULT =null;

              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("SYMBOLS",27, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          return CUP$parserPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)).value;
		RESULT = start_val;
              CUP$parserPnt$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserPnt$stack.elementAt(CUP$parserPnt$top-1)), ((java_cup.runtime.Symbol)CUP$parserPnt$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserPnt$parser.done_parsing();
          return CUP$parserPnt$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

