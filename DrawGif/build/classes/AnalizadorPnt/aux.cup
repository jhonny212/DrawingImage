package AnalizadorPnt;
import java_cup.runtime.Symbol;
parser code {:
   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }
:}

terminal Vars,abreCor,cierraCor,Int,Id,String,Boolean,puntoComa,coma,equals,
Sum,Res,Mul,Div,Num,abreParen,cierraParen,Double,Cadena,Operador,OperadorLogico,Bool,COM,Error,abreLlaves,cierraLlaves
,Punto,Inst,If,Else,While,pintar;

non-terminal A,VARIABLES,VALUES,OPCBOOL,OPCSTR,OPCINT,K,E,T,OP2,OP1,F,STR,STR1,CADENA,CONDICION,COND,COND1,
INSTRUC,INSTRUCCIONES,ASIGNACION,ASIG,SENTENCIAIF,SENTENCIAWHILE,PAINT,PARAM,PARAM2,SYMBOLS,STR2,C,U,X,V
,STR3,COND2,CONDICION2,COND22
,DATA,OP,TP;


start with A;
SYMBOLS::= Sum | Res | Mul | Div | abreParen | cierraParen;
A::= Id equals STR ;

VARIABLES::= Vars abreCor VALUES ;


VALUES::= Int Id OPCINT K
| String Id OPCSTR K
| Boolean Id OPCBOOL K;

OPCBOOL::= coma Id OPCBOOL
| puntoComa
| equals CONDICION 
;

OPCSTR::= coma Id OPCSTR
| puntoComa
| equals STR OPCSTR;
 
OPCINT::= coma Id OPCINT
| puntoComa
| equals F OPCINT;

K::= cierraCor | VALUES;

E::=DATA V | abreParen E C V ;
V::=OP2 T X | OP E | ;
X::= OP E | ;
T::= DATA U | abreParen E C U;
U::= OP2 T | ;
C::= cierraParen;
OP::= Sum | Res ;
OP2::= Mul | Div;
DATA::= Num | Double | Id | COM  COM ;




STR::= Bool COND |abreParen Bool cierraParen COND | abreParen STR cierraParen COND|COND2 COND ;
COND2::= E Operador E | abreParen E Operador E cierraParen | E ;
COND::=OperadorLogico STR | puntoComa;