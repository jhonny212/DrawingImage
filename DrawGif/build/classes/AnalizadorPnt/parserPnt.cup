package AnalizadorPnt;
import java_cup.runtime.Symbol;
/*
import static AnalizadorPnt.parserPnt.Semanticos;
import static AnalizadorPnt.parserPnt.cadenaValue;
import static AnalizadorPnt.parserPnt.getObj;
import static AnalizadorPnt.parserPnt.tablaForInt;

import static AnalizadorPnt.parserPnt.tipoVar;
import TablaDeSimbolos.tablaInt;

import drawgif.Errors;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
*/
parser code {:
    public static ArrayList<tablaInt> tablaForInt;
    public static ArrayList<Errors> Semanticos;
    public static boolean containsLleter,containsBool;
        
public static int tipoVar,tipoOperacion;
public static String Variables,condicion,cadenaPrev;

   public void syntax_error(Symbol s){
       System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

 public static Object[] getObj(Object [] obj1,Object [] obj2,int opc, int cases,int e2left,int e2right){

int type=(int)obj1[0]+(int)obj2[0];
String x1=(String)obj1[2];
String x2=(String)obj2[2];
boolean bool=(boolean)obj2[3];
if(bool){
    obj1[3]=true;
}
     if(cases==1){

if(type==2){
int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1+v2;
    obj1[2]=x1+"+"+x2;
 
    return obj1;
    case 2:
    obj1[1]=v1-v2;
    obj1[2]=x1+"-"+x2;
  
    return obj1;
 
}
}else{
obj1[0]=2;    
    
if(opc==1){
  
    obj1[2]=x1+"+"+x2;
}else{
 
  obj1[2]=x1+"-"+x2;
}
return obj1;
}     
     }else{

if(type==2){

int v1=(int)obj1[1];
int v2=(int)obj2[1];

switch(opc){
    case 1:
    obj1[1]=v1*v2;
    obj1[2]=x1+"*"+x2;
  
    return obj1;
    case 2:
    if(v2==0){
        v2=-1;
        Semanticos.add(new Errors(String.valueOf(v2),"No se puede dividir entre cero",-1,e2left,e2right));
    }
    obj1[1]=v1/v2;
    obj1[2]=x1+"/"+x2;
   
    return obj1;
}
}else{
Semanticos.add(new Errors(String.valueOf(obj1[0]),"Error en Operadores para una cadena, solo se puede concatenar",-1,e2left,e2right));
   
obj1[0]=2;    
if(opc==1){
 
    obj1[2]=x1+"*"+x2;
}else{

  obj1[2]=x1+"/"+x2;
}
return obj1;
}
     }
 return null;
 }

 
:}

terminal Vars,abreCor,cierraCor,Int,Id,String,Boolean,puntoComa,coma,equals,
Sum,Res,Mul,Div,Num,abreParen,cierraParen,Double,Cadena,Operador,Bool,COM,Error,abreLlaves,cierraLlaves
,Punto,Inst,If,Else,While,pintar,dobleEquals,And,Or;

non-terminal A,VARIABLES,VALUES,OPCBOOL,OPCSTR,OPCINT,K,E,T,OP2,OP1,F,STR,STR1,CADENA,CONDICION,COND,COND1,
INSTRUC,INSTRUCCIONES,ASIGNACION,ASIG,SENTENCIAIF,SENTENCIAWHILE,PAINT,PARAM,PARAM2,SYMBOLS,STR2,C,U,X,V
,STR3,COND2,CONDICION2,COND22,COND23,CONDICIONAL,Datas,ASIGNACION2,ASIG2,CONDICIONAL2,COND24,COND233
,E22,V22,X22,T22,U22,C22,DATA22,S1,S2,S3,S11,S22, OPCIONINT1,OPCIONINT2,INT,STRING,BOOLEAN,OPCIONBOOL,
OPCIONBOOL2,OPCIONSTRING,OPCIONSTRING2,STRINGX,OperadorLogico,AS;

precedence left And,Or;

start with AS;


SYMBOLS::= Sum | Res | Mul | Div | abreParen | cierraParen;
//A::= VARIABLES K  INSTRUCCIONES;
OperadorLogico::= And {:RESULT="&&";:} | Or {:RESULT="||";:};
AS::= A INSTRUCCIONES:e T22;
T22::= INSTRUCCIONES:e T22|;
A::=VARIABLES:e K:e1 
{:
containsBool=false;
containsLleter=false;
String txt=String.valueOf(e)+" "+String.valueOf(e1);
Variables=txt.replace("null","");
System.out.println(Variables);
:};

VARIABLES::= Vars abreCor VALUES:e {:RESULT=e;:};


VALUES::= INT:e OPCIONINT1:e1
{:RESULT="int "+e+" "+e1+";\n";:}
| BOOLEAN:e OPCIONBOOL:e1
{:RESULT="boolean "+e+" "+e1+";\n";:}
| STRINGX:e OPCIONSTRING:e1
{:RESULT="String "+e+" "+e1+";\n";:}
;

INT::=Int Id:e OPCINT:e1 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);
boolean isNull=false;
if((double)e1==-1.5){
isNull=true;
RESULT=(String)e;
}else{
RESULT=(String)e+"="+String.valueOf(value);
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"int"));

:};
BOOLEAN::= Boolean Id:e OPCBOOL:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=true;
boolean isNull=false;
if(e1==null){
 isNull=true;
 RESULT=(String)e;
}
tablaForInt.add(new tablaInt(value,(String)e,isNull,"bool"));
RESULT=(String)e+(String)e1;
:};
OPCBOOL::= equals E22:e 
{:
String retorno="";
try{
Condicion tmp=(Condicion)e;
int tipo=tmp.getTipo();
retorno="="+tmp.letter;
if(tipo!=3){
    if(tmp.letter.contains("&&")|| tmp.letter.contains("||") 
    ||tmp.letter.contains(">")||tmp.letter.contains("<")||tmp.letter.contains("equals")
    ||tmp.letter.contains("<=") || tmp.letter.contains(">=") ||tmp.letter.contains("==")
    ||tmp.letter.contains("!=")){

    }else{
    Semanticos.add(new Errors(tmp.letter,"Se debe asignar un valor logico (booleano)",-1,eleft,eright));
    }
    }
}catch(Exception ex){
    Object obj[]=(Object[])e;
    int tipo=(int) obj[0];
    if(tipo!=3){
    Semanticos.add(new Errors((String)obj[2],"Se debe asignar un valor logico (booleano)",-1,eleft,eright));
    }
    retorno="="+obj[2];
}


RESULT=retorno;
:} 
| ; 
OPCIONBOOL::= OPCIONBOOL2:e OPCIONBOOL:e1 
{:
if(e1!=null){
RESULT=(String)e+(String)e1;
}else{
RESULT=(String)e;
}
:}
| puntoComa ;
OPCIONBOOL2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(false,(String)e,true,"bool"));
RESULT=","+(String)e;
:}
| coma Id:e equals E22:e1
{:
String msj="";
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
boolean value=true;
tablaForInt.add(new tablaInt(value,(String)e,false,"bool"));
try{
Condicion tmp=(Condicion)e1;
msj=tmp.letter;
}catch(Exception ex){
Object obj[]=(Object[])e1;
msj=(String)obj[2];
}

RESULT=","+(String)e+"="+msj;
:}
;

STRINGX::= String Id:e OPCSTR:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

boolean isNull=false;
if(e1==null){
isNull=true;
RESULT=(String)e;
}else{
    RESULT=(String)e+(String)e1;
}
tablaForInt.add(new tablaInt("",(String)e,isNull,"str"));
:};

OPCSTR::= equals S1:e 
{:
Object obj[]=(Object[])e;
if(!containsLleter){
     Semanticos.add(new Errors((String)obj[2],"Despues de =, debe contener al menos el valor de una cadena",-1,eleft,eright));
}
    containsLleter=false;
RESULT="="+obj[2];

:} 
| ; 

OPCIONSTRING::= OPCIONSTRING2:e OPCIONSTRING:e1
{:RESULT=""+e+""+e1;:}
 | puntoComa {:RESULT="";:};
OPCIONSTRING2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt("",(String)e,true,"str"));
RESULT=","+e;
:}
| coma Id:e equals S1:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
Object obj[]=(Object[])e1;
if(!containsLleter){
     Semanticos.add(new Errors((String)obj[2],"Despues de =, debe contener al menos el valor de una cadena",-1,eleft,eright));
}
    containsLleter=false;
//String value=String.valueOf(e1);
tablaForInt.add(new tablaInt("",(String)e,false,"str"));
RESULT=","+e+"="+obj[2];
:}
;




OPCINT::= equals E:e {:RESULT=e;:} | {:RESULT=-1.5;:};

OPCIONINT1::= OPCIONINT2:e OPCIONINT1:e1
{:
RESULT=(String)e+(String)e1;
:}
| puntoComa {:RESULT="";:};
OPCIONINT2::= coma Id:e 
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}

tablaForInt.add(new tablaInt(-1,(String)e,true,"int"));
RESULT=","+(String)e;
:}


| coma Id:e equals E:e1
{:
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    Semanticos.add(new Errors((String)e,"El identificador existe",-1,eleft,eright));
    break;
}}
int value=(int)((double)e1);

tablaForInt.add(new tablaInt(value,(String)e,false,"int"));

RESULT=","+(String)e+" = "+String.valueOf(value);

:}

;
K::= cierraCor {:RESULT="";:} | VALUES:e K:e1 
{:
    RESULT=(String)e+(String)e1;
:};

/*
*Condicion int
*/



E::=T:e OP1:e1 E:e2
{:
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1+x2);
}else{
RESULT=(x1-x2);
}
}catch(Exception ex){}
:}
| T:e {:RESULT=e;:};
T::= F:e OP2:e1 T:e2
{:
try{
int opc=(int)e1;
double x1=(double)e;
double x2=(double)e2;

if(opc==1){
RESULT=(x1*x2);
}else{
RESULT=(x1/x2);
}
}catch(Exception ex){}
:}
| F:e {:RESULT=e;:};

F::= Num:e
{:RESULT=Double.parseDouble((String)e);:}
| abreParen E:e cierraParen {:RESULT=e;:}
| Id:e
{:
String msj="El identificador no existe";
boolean valid=true;
int valor=1;
for(int i=0;i<tablaForInt.size();i++){
    if(((String)e).equals(tablaForInt.get(i).getId())){
    try{
    valor=tablaForInt.get(i).getValorInt();
    RESULT=Double.parseDouble(String.valueOf(valor));
    valid=false;
    if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
    valid=true;
    }   
    }catch(Exception exs){
    msj="La variable no es de tipo entero";
    valid=true;
    }
    
     break;
   
}}
if(valid){
    RESULT=-1.5;
    parserPnt.Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
:}
| Double:e 
{:RESULT=Double.parseDouble((String)e);:};

OP2::= Mul 
{:RESULT=1;
:} 
| Div 
{:RESULT=2;

:};
OP1::=Sum 
{:RESULT=1;

:} 
| Res 
{:

RESULT=2;:};



/*
*Condicion string
*/


CADENA::= STRING:e CADENA:e1
{:
RESULT=e+""+e1;
:}
| {:RESULT="";:};
STRING::= Cadena:e {:RESULT=e;:} | Id:e {:RESULT=e;:} | Num:e {:RESULT=e;:} | SYMBOLS:e {:RESULT=e;:};


E22::= C:e S11:e1
{:

try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion((boolean)e,next);
RESULT=cond;
}catch(Exception ex){
Condicion c=(Condicion)e;
Condicion cond =new Condicion(c,(extraClass)e1);
RESULT=cond;
}


:}
| CONDICION:e X22:e1
{:
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion(e,next);
RESULT=cond;
}catch(Exception ex){
try{
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
RESULT=cond;
}   catch(Exception ss){
RESULT=e;
} 
}
:};


//------------------------------------------------------------------------->
X22::= Operador:e S1:e1 S11:e2
{:
Object obj[]=(Object[])e1;
String op=(String)e;
int typo=(int)obj[0];
RESULT=new extraClass(op,typo,String.valueOf(obj[2]),(extraClass)e2);
:}
| S11:e 
{:
RESULT=e;
:}
;
//-------------------------------------------------------------------------->

S11::= OperadorLogico:e E22:e1 
{:
RESULT=new extraClass((String)e,(Condicion)e1);
:} 
|;

//CONDICIONES--------------------------->

CONDICION::= V22:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:} 
|V22:e {: RESULT=e;:} 
;
//--------------------------------------->
V22::= DATA22:e OP2:e1 S2:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);
:}
|DATA22:e {:RESULT=e;:} 
|abreParen COND1:e X22:e1 cierraParen 
{:
if(e1!=null){
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion(e,next);
String letter=cond.letter;
cond.setLetter("("+letter+")");
RESULT=cond;
}catch(Exception ex){
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}
}else{
try{
Object obj[]=(Object[])e;
obj[2]="("+obj[2]+")";    
RESULT=e;
}catch(Exception ex){
Condicion cnd=(Condicion) e;
cnd.setLetter("("+cnd.letter+")");
RESULT=cnd;
}    
}
:}
;


//------------------------------------------------------------------------->
COND1::= V22:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:}
|V22:e {:RESULT=e;:}
;
//----------------------------->



C::=  abreParen C:e S11:e1 cierraParen 
{:
try{
extraClass next=(extraClass)e1;
Condicion cond =new Condicion((boolean)e,next);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}catch(Exception ex){
Condicion cond =new Condicion((Condicion)e,(extraClass)e1);
cond.setLetter("("+cond.letter+")");
RESULT=cond;
}
:}
| Bool:e 
{:
RESULT=Boolean.parseBoolean((String)e);
containsBool=true;
;:};





//Retornando el tipo de variable
DATA22::=
Num:e {:
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;
:}
|Id:e 
{:
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;

String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        array[0]=type;
       
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            containsLleter=true;
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            containsBool=true;
            break;
        }
        array[2]=Id;
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}


if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
   array[3]=true;
}
RESULT=array;
:} 
| COM CADENA:e COM 
{:
containsLleter=true;
Object array[]=new Object[4];
array[0]=2;
array[1]=-1;
array[2]="\""+(String)e+"\"";
array[3]=false;
RESULT=array;
:};



S1::=S2:e OP1:e1 S1:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 1,e2left,e2right);
:}
| S2:e {:RESULT=e;:};
S2::= S3:e OP2:e1 S2:e2
{:
RESULT=getObj((Object []) e,(Object []) e2,(int) e1, 2,e2left,e2right);
:}
| S3:e {:RESULT=e;:};
S3::= Num:e
{:
Object array[]=new Object[4];
array[0]=1;
array[1]=Integer.parseInt(String.valueOf(e));
array[2]=String.valueOf(e);
array[3]=false;

RESULT=array;
:}
| abreParen S1:e cierraParen
{:
Object obj[]=(Object[])e;
String aux=(String)obj[2];
obj[2]="("+aux+")";
RESULT=obj;
;:}
| Id:e
{:
Object array[]=new Object[4];
array[0]=-1;
array[1]=0;
array[2]="";
array[3]=false;
boolean entro=false;
String Id=String.valueOf(e);
boolean exist=false;
String msj="La variable no se encontro";
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        entro=false;
        int type=tablaForInt.get(i).type();
        array[0]=type;
        if(type==2){
            containsLleter=true;
            array[3]=true;
        }
        exist=true;
        switch(type){
            case 1:
            array[1]=tablaForInt.get(i).getValorInt();
            break;
            case 2:
            break;
            case 3:
            array[3]=tablaForInt.get(i).getValorBoolean();
            Semanticos.add(new Errors((String)e,"No se puede asignar una variable booleana",-1,eleft,eright));
            containsBool=true;
            break;
        }
            
        if(tablaForInt.get(i).isIsNull()){
        msj="La variable no esta inicializada";
        exist=false;
        }
        break;
    }
}
array[2]=Id;
if(entro){
    
}        
if(!exist){
   Semanticos.add(new Errors((String)e,msj,-1,eleft,eright));
}
RESULT=array;
:}
| COM CADENA:e COM
{:
Object array[]=new Object[4];
containsLleter=true;
array[0]=2;
array[1]=-1;
array[2]="\""+(String)e+"\"";
array[3]=true;
RESULT=array;
:}
;


/*
*SECCION DE INSTRUCCIONES
*/

INSTRUCCIONES::= Inst abreParen Id:e cierraParen abreCor INSTRUC:e1 ASIG:e2
{:
String methoD="String Id="+(String)e+"\n";
methoD+=(String)e1+(String)e2;
System.out.println(methoD);
:}
;
INSTRUC::= ASIGNACION:e {:RESULT=e;:}  | PAINT:e {:RESULT=e;:} | SENTENCIAIF:e {:RESULT=e;:} 
| SENTENCIAWHILE:e  {:RESULT=e;:} ;
ASIGNACION::= Id:e equals E22:e1 puntoComa
{:
String Id=String.valueOf(e);
for(int i=0;i<tablaForInt.size();i++){
    if(Id.equals(tablaForInt.get(i).getId())){
        int type=tablaForInt.get(i).type();
        tablaForInt.get(i).setIsNull(false);
        switch(type){
            case 1:
            if(containsLleter || containsBool){
            Semanticos.add(new Errors("=","Despues de token =, tiene que asignarse a un valor entero",-1,e1left,e1right));
            }
           
            break;
            case 2:
            if(!containsLleter || containsBool){
              Semanticos.add(new Errors("=","Despues de token =, debe contener al menos una cadena",-1,e1left,e1right));
            }
            
            break;
            case 3:
            break;
        }
         containsLleter=false;
         containsBool=false;
        break;
        }
}

try{
Condicion con=(Condicion)e1;
RESULT=(String)e+"="+con.letter+";";
}catch(Exception ex){
    Object ob[]=(Object[])e1;
    RESULT=(String)e+"="+ob[2]+";";
}
:};
ASIG::= cierraCor {:RESULT="";:}|INSTRUC:e ASIG:e1 {:RESULT=(String)e+(String)e1;:};

SENTENCIAIF::= If abreParen E22:e cierraParen V:e1  C22:e2
{:
String txt="if(";
try{
Condicion con=(Condicion)e;
txt+=con.letter+")";

RESULT=txt+(String)e1+(String)e2;
}
catch(Exception ex){
    Object ob[]=(Object[])e;
    Semanticos.add(new Errors((String)ob[2],"Error, una sentecia if debe contener operaciones logicas",-1,eleft,eright));
    RESULT="";
}

:};
SENTENCIAWHILE::= While abreParen E22:e cierraParen V:e1 
{:

String txt="while(";
try{
Condicion con=(Condicion)e;
txt+=con.letter+")";
RESULT=txt+(String)e1;
}
catch(Exception ex){
    Object ob[]=(Object[])e;
    Semanticos.add(new Errors((String)ob[2],"Error, una sentecia if debe contener operaciones logicas",-1,eleft,eright));
    RESULT="";
}
:};
PAINT::= pintar abreParen S1:e coma S1:e1 coma PARAM2:e2 coma PARAM2:e3 cierraParen puntoComa
{:
Object ob[]=(Object[])e;
Object ob2[]=(Object[])e1;
boolean bool=(boolean)ob[3];
String t1=(String)ob[2];
String t2=(String)ob2[2];

if(!bool){
   //Semanticos.add(new Errors(t1,"Error en el parametro 1, debe contener al menos una cadena",-1,eleft,eright));
}
bool=(boolean)ob2[3];
if(!bool){
   //Semanticos.add(new Errors(t2,"Error en el parametro 2, debe contener al menos una cadena",-1,e1left,e1right));
}
String txt = "";
int vector1[]=(int [])e2;
int vector2[]=(int [])e3;
txt="\n pintar("+t1+","+t2+","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";

if(Semanticos.size()==1){
    int is=0;
   if(t1.contains("+")){
       is++;
      
   }
    if(t2.contains("+")){
       is++;
          
   }
    if(t2.contains("*")|| t2.contains("/")){is=3;}
     if(t1.contains("*")|| t1.contains("/")){is=3;}
   if(is==1 || is==0){
    Semanticos=new ArrayList();
    if(t1.contains("\"")){
    txt="\n pintar("+t1+",\""+t2+"\","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
    }else{
    txt="\n pintar(\""+t1+"\","+t2+","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
    }
   }
}
else if(Semanticos.size()==2){
    if(!t1.contains("+") &&  !t2.contains("+")){
        if(t2.contains("*")|| t2.contains("/") || t1.contains("*")|| t1.contains("/")){
        }else{
        Semanticos=new ArrayList();
        txt="\n pintar(\""+t1+"\",\""+t2+"\","+vector1[0]+","+vector1[1]+","+vector2[0]+","+vector2[1]+");\n";
        }
    }
}



RESULT=txt;
containsLleter=false;
containsBool=false;
:};
//----------------------------------------------------------------------->
PARAM2::= E:e 
{:
int value=(int)((double)e); 
int vector[]={value,-9999};
RESULT= vector; 
:}
| E:e Punto E:e1 
{:
int value=(int)((double)e);
int value2=(int)((double)e1);
int vector[]={value,value2};
RESULT= vector; 
:};
//------------------------------------------------------------------------->
V::= abreLlaves  Datas:e cierraLlaves {:RESULT="\n{\n"+e+"\n}\n";:};
Datas::= INSTRUC:e S22:e1 {:RESULT=(String)e+(String)e1;:} | {:RESULT="";:};
S22::= INSTRUC:e S22:e1 
{:RESULT=(String)e+(String)e1;:}
|{:RESULT="";:};
C22::= Else:e V:e1 
{:RESULT="else"+(String)e1;:}
| {:RESULT="";:};
